
sensorCW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006aa  00800200  00001978  00001a0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001978  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  008008aa  008008aa  000020b6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000020b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002114  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00002158  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000036c7  00000000  00000000  000022d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f4d  00000000  00000000  0000599f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001567  00000000  00000000  000068ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000030c  00000000  00000000  00007e54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b5b  00000000  00000000  00008160  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001663  00000000  00000000  00008cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  0000a31e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	79 c0       	rjmp	.+242    	; 0xf4 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__vector_1>
       8:	95 c0       	rjmp	.+298    	; 0x134 <__bad_interrupt>
       a:	00 00       	nop
       c:	93 c0       	rjmp	.+294    	; 0x134 <__bad_interrupt>
       e:	00 00       	nop
      10:	91 c0       	rjmp	.+290    	; 0x134 <__bad_interrupt>
      12:	00 00       	nop
      14:	8f c0       	rjmp	.+286    	; 0x134 <__bad_interrupt>
      16:	00 00       	nop
      18:	8d c0       	rjmp	.+282    	; 0x134 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8b c0       	rjmp	.+278    	; 0x134 <__bad_interrupt>
      1e:	00 00       	nop
      20:	89 c0       	rjmp	.+274    	; 0x134 <__bad_interrupt>
      22:	00 00       	nop
      24:	87 c0       	rjmp	.+270    	; 0x134 <__bad_interrupt>
      26:	00 00       	nop
      28:	85 c0       	rjmp	.+266    	; 0x134 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	83 c0       	rjmp	.+262    	; 0x134 <__bad_interrupt>
      2e:	00 00       	nop
      30:	81 c0       	rjmp	.+258    	; 0x134 <__bad_interrupt>
      32:	00 00       	nop
      34:	7f c0       	rjmp	.+254    	; 0x134 <__bad_interrupt>
      36:	00 00       	nop
      38:	7d c0       	rjmp	.+250    	; 0x134 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7b c0       	rjmp	.+246    	; 0x134 <__bad_interrupt>
      3e:	00 00       	nop
      40:	79 c0       	rjmp	.+242    	; 0x134 <__bad_interrupt>
      42:	00 00       	nop
      44:	77 c0       	rjmp	.+238    	; 0x134 <__bad_interrupt>
      46:	00 00       	nop
      48:	75 c0       	rjmp	.+234    	; 0x134 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	73 c0       	rjmp	.+230    	; 0x134 <__bad_interrupt>
      4e:	00 00       	nop
      50:	71 c0       	rjmp	.+226    	; 0x134 <__bad_interrupt>
      52:	00 00       	nop
      54:	6f c0       	rjmp	.+222    	; 0x134 <__bad_interrupt>
      56:	00 00       	nop
      58:	6d c0       	rjmp	.+218    	; 0x134 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6b c0       	rjmp	.+214    	; 0x134 <__bad_interrupt>
      5e:	00 00       	nop
      60:	69 c0       	rjmp	.+210    	; 0x134 <__bad_interrupt>
      62:	00 00       	nop
      64:	67 c0       	rjmp	.+206    	; 0x134 <__bad_interrupt>
      66:	00 00       	nop
      68:	65 c0       	rjmp	.+202    	; 0x134 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	63 c0       	rjmp	.+198    	; 0x134 <__bad_interrupt>
      6e:	00 00       	nop
      70:	61 c0       	rjmp	.+194    	; 0x134 <__bad_interrupt>
      72:	00 00       	nop
      74:	5f c0       	rjmp	.+190    	; 0x134 <__bad_interrupt>
      76:	00 00       	nop
      78:	5d c0       	rjmp	.+186    	; 0x134 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5b c0       	rjmp	.+182    	; 0x134 <__bad_interrupt>
      7e:	00 00       	nop
      80:	59 c0       	rjmp	.+178    	; 0x134 <__bad_interrupt>
      82:	00 00       	nop
      84:	57 c0       	rjmp	.+174    	; 0x134 <__bad_interrupt>
      86:	00 00       	nop
      88:	55 c0       	rjmp	.+170    	; 0x134 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	53 c0       	rjmp	.+166    	; 0x134 <__bad_interrupt>
      8e:	00 00       	nop
      90:	51 c0       	rjmp	.+162    	; 0x134 <__bad_interrupt>
      92:	00 00       	nop
      94:	4f c0       	rjmp	.+158    	; 0x134 <__bad_interrupt>
      96:	00 00       	nop
      98:	4d c0       	rjmp	.+154    	; 0x134 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4b c0       	rjmp	.+150    	; 0x134 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	49 c0       	rjmp	.+146    	; 0x134 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	47 c0       	rjmp	.+142    	; 0x134 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	45 c0       	rjmp	.+138    	; 0x134 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	43 c0       	rjmp	.+134    	; 0x134 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	41 c0       	rjmp	.+130    	; 0x134 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	3f c0       	rjmp	.+126    	; 0x134 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	3d c0       	rjmp	.+122    	; 0x134 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3b c0       	rjmp	.+118    	; 0x134 <__bad_interrupt>
      be:	00 00       	nop
      c0:	39 c0       	rjmp	.+114    	; 0x134 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	37 c0       	rjmp	.+110    	; 0x134 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	35 c0       	rjmp	.+106    	; 0x134 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	33 c0       	rjmp	.+102    	; 0x134 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	31 c0       	rjmp	.+98     	; 0x134 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	2f c0       	rjmp	.+94     	; 0x134 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	2d c0       	rjmp	.+90     	; 0x134 <__bad_interrupt>
      da:	00 00       	nop
      dc:	2b c0       	rjmp	.+86     	; 0x134 <__bad_interrupt>
      de:	00 00       	nop
      e0:	29 c0       	rjmp	.+82     	; 0x134 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c9 02       	muls	r28, r25
      e6:	cc 02       	muls	r28, r28
      e8:	a4 04       	cpc	r10, r4
      ea:	f4 04       	cpc	r15, r4
      ec:	24 05       	cpc	r18, r4
      ee:	51 05       	cpc	r21, r1
      f0:	7b 05       	cpc	r23, r11
      f2:	3f 06       	cpc	r3, r31

000000f4 <__ctors_end>:
      f4:	11 24       	eor	r1, r1
      f6:	1f be       	out	0x3f, r1	; 63
      f8:	cf ef       	ldi	r28, 0xFF	; 255
      fa:	d1 e2       	ldi	r29, 0x21	; 33
      fc:	de bf       	out	0x3e, r29	; 62
      fe:	cd bf       	out	0x3d, r28	; 61
     100:	00 e0       	ldi	r16, 0x00	; 0
     102:	0c bf       	out	0x3c, r16	; 60

00000104 <__do_copy_data>:
     104:	18 e0       	ldi	r17, 0x08	; 8
     106:	a0 e0       	ldi	r26, 0x00	; 0
     108:	b2 e0       	ldi	r27, 0x02	; 2
     10a:	e8 e7       	ldi	r30, 0x78	; 120
     10c:	f9 e1       	ldi	r31, 0x19	; 25
     10e:	00 e0       	ldi	r16, 0x00	; 0
     110:	0b bf       	out	0x3b, r16	; 59
     112:	02 c0       	rjmp	.+4      	; 0x118 <__do_copy_data+0x14>
     114:	07 90       	elpm	r0, Z+
     116:	0d 92       	st	X+, r0
     118:	aa 3a       	cpi	r26, 0xAA	; 170
     11a:	b1 07       	cpc	r27, r17
     11c:	d9 f7       	brne	.-10     	; 0x114 <__do_copy_data+0x10>

0000011e <__do_clear_bss>:
     11e:	28 e0       	ldi	r18, 0x08	; 8
     120:	aa ea       	ldi	r26, 0xAA	; 170
     122:	b8 e0       	ldi	r27, 0x08	; 8
     124:	01 c0       	rjmp	.+2      	; 0x128 <.do_clear_bss_start>

00000126 <.do_clear_bss_loop>:
     126:	1d 92       	st	X+, r1

00000128 <.do_clear_bss_start>:
     128:	a2 3b       	cpi	r26, 0xB2	; 178
     12a:	b2 07       	cpc	r27, r18
     12c:	e1 f7       	brne	.-8      	; 0x126 <.do_clear_bss_loop>
     12e:	74 d6       	rcall	.+3304   	; 0xe18 <main>
     130:	0c 94 ba 0c 	jmp	0x1974	; 0x1974 <_exit>

00000134 <__bad_interrupt>:
     134:	65 cf       	rjmp	.-310    	; 0x0 <__vectors>

00000136 <sendChar>:
}

// Transmit a character via UART
void sendChar(char data) {
	// Wait until the buffer is empty
	while (!(UCSR0A & (1 << UDRE0)));
     136:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
     13a:	95 ff       	sbrs	r25, 5
     13c:	fc cf       	rjmp	.-8      	; 0x136 <sendChar>
	// Put data into the buffer, send the data
	UDR0 = data;
     13e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     142:	08 95       	ret

00000144 <sendString>:
}

// Transmit a string via UART
void sendString(const char *str) {
     144:	cf 93       	push	r28
     146:	df 93       	push	r29
     148:	ec 01       	movw	r28, r24
	// Loop through each character in the string and send it
	while (*str != '\0') {
     14a:	02 c0       	rjmp	.+4      	; 0x150 <sendString+0xc>
		sendChar(*str);
     14c:	f4 df       	rcall	.-24     	; 0x136 <sendChar>
		str++;
     14e:	21 96       	adiw	r28, 0x01	; 1
}

// Transmit a string via UART
void sendString(const char *str) {
	// Loop through each character in the string and send it
	while (*str != '\0') {
     150:	88 81       	ld	r24, Y
     152:	81 11       	cpse	r24, r1
     154:	fb cf       	rjmp	.-10     	; 0x14c <sendString+0x8>
		sendChar(*str);
		str++;
	}
}
     156:	df 91       	pop	r29
     158:	cf 91       	pop	r28
     15a:	08 95       	ret

0000015c <initUART>:
#define PASSWORD_EEPROM_ADDRESS 0x10

// Initialize UART for ATmega2560
void initUART() {
	// Set baud rate to 9600 (for 16 MHz frequency)
	UBRR0H = (BAUD_PRESCALE >> 8);
     15c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = BAUD_PRESCALE;
     160:	87 e6       	ldi	r24, 0x67	; 103
     162:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>

	// Enable transmitter and receiver
	UCSR0B = (1 << TXEN0) | (1 << RXEN0);
     166:	88 e1       	ldi	r24, 0x18	; 24
     168:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>

	// Set frame format: 8 data bits, 1 stop bit, no parity
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     16c:	86 e0       	ldi	r24, 0x06	; 6
     16e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>

	// Debug message
	sendString("Hello, welcome to Queen Elizabeth National Park\r\n");
     172:	8a e6       	ldi	r24, 0x6A	; 106
     174:	92 e0       	ldi	r25, 0x02	; 2
     176:	e6 cf       	rjmp	.-52     	; 0x144 <sendString>
     178:	08 95       	ret

0000017a <rotateMotor>:
		str++;
	}
}
void rotateMotor(int rotations){
	int steps = 20;
	int revolutions = rotations *steps;
     17a:	24 e1       	ldi	r18, 0x14	; 20
     17c:	28 9f       	mul	r18, r24
     17e:	b0 01       	movw	r22, r0
     180:	29 9f       	mul	r18, r25
     182:	70 0d       	add	r23, r0
     184:	11 24       	eor	r1, r1
	DDRK |=(1<<PK0);
     186:	e7 e0       	ldi	r30, 0x07	; 7
     188:	f1 e0       	ldi	r31, 0x01	; 1
     18a:	80 81       	ld	r24, Z
     18c:	81 60       	ori	r24, 0x01	; 1
     18e:	80 83       	st	Z, r24
	for (int x =0; x < revolutions; x++)
     190:	20 e0       	ldi	r18, 0x00	; 0
     192:	30 e0       	ldi	r19, 0x00	; 0
     194:	11 c0       	rjmp	.+34     	; 0x1b8 <rotateMotor+0x3e>
	{
		PORTK ^=(1<<PK0);
     196:	e8 e0       	ldi	r30, 0x08	; 8
     198:	f1 e0       	ldi	r31, 0x01	; 1
     19a:	40 81       	ld	r20, Z
     19c:	91 e0       	ldi	r25, 0x01	; 1
     19e:	94 27       	eor	r25, r20
     1a0:	90 83       	st	Z, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1a2:	4f e0       	ldi	r20, 0x0F	; 15
     1a4:	88 e9       	ldi	r24, 0x98	; 152
     1a6:	92 e0       	ldi	r25, 0x02	; 2
     1a8:	41 50       	subi	r20, 0x01	; 1
     1aa:	80 40       	sbci	r24, 0x00	; 0
     1ac:	90 40       	sbci	r25, 0x00	; 0
     1ae:	e1 f7       	brne	.-8      	; 0x1a8 <rotateMotor+0x2e>
     1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <rotateMotor+0x38>
     1b2:	00 00       	nop
}
void rotateMotor(int rotations){
	int steps = 20;
	int revolutions = rotations *steps;
	DDRK |=(1<<PK0);
	for (int x =0; x < revolutions; x++)
     1b4:	2f 5f       	subi	r18, 0xFF	; 255
     1b6:	3f 4f       	sbci	r19, 0xFF	; 255
     1b8:	26 17       	cp	r18, r22
     1ba:	37 07       	cpc	r19, r23
     1bc:	64 f3       	brlt	.-40     	; 0x196 <rotateMotor+0x1c>
	{
		PORTK ^=(1<<PK0);
		_delay_ms(850);
	}
	
}
     1be:	08 95       	ret

000001c0 <virtualTerminal>:
	
}

void virtualTerminal() {
	// Send the sentence over UART
	sendString("Select action:\r\n");
     1c0:	8c e9       	ldi	r24, 0x9C	; 156
     1c2:	92 e0       	ldi	r25, 0x02	; 2
     1c4:	bf df       	rcall	.-130    	; 0x144 <sendString>
	sendString("1) Login\r\n");
     1c6:	8d ea       	ldi	r24, 0xAD	; 173
     1c8:	92 e0       	ldi	r25, 0x02	; 2
     1ca:	bc df       	rcall	.-136    	; 0x144 <sendString>
	sendString("2) Take registration\r\n");
     1cc:	88 eb       	ldi	r24, 0xB8	; 184
     1ce:	92 e0       	ldi	r25, 0x02	; 2
     1d0:	b9 df       	rcall	.-142    	; 0x144 <sendString>
	sendString("3) How many tourists, categorized by age group, are in the park\r\n");
     1d2:	8f ec       	ldi	r24, 0xCF	; 207
     1d4:	92 e0       	ldi	r25, 0x02	; 2
     1d6:	b6 df       	rcall	.-148    	; 0x144 <sendString>
	sendString("4) Which vehicles are still in the park\r\n");
     1d8:	81 e1       	ldi	r24, 0x11	; 17
     1da:	93 e0       	ldi	r25, 0x03	; 3
     1dc:	b3 df       	rcall	.-154    	; 0x144 <sendString>
	sendString("5) input the number of bottles in the fridge\r\n");
     1de:	8b e3       	ldi	r24, 0x3B	; 59
     1e0:	93 e0       	ldi	r25, 0x03	; 3
     1e2:	b0 df       	rcall	.-160    	; 0x144 <sendString>
	sendString("6) check the number of bottles in the fridge\r\n");
     1e4:	8a e6       	ldi	r24, 0x6A	; 106
     1e6:	93 e0       	ldi	r25, 0x03	; 3
     1e8:	ad df       	rcall	.-166    	; 0x144 <sendString>
	sendString("7)  SignOut of the vistors /To remove a car from the park\r\n");
     1ea:	89 e9       	ldi	r24, 0x99	; 153
     1ec:	93 e0       	ldi	r25, 0x03	; 3
     1ee:	aa df       	rcall	.-172    	; 0x144 <sendString>
     1f0:	85 ed       	ldi	r24, 0xD5	; 213
	sendString("8) Is the park full or not\r\n");
     1f2:	93 e0       	ldi	r25, 0x03	; 3
     1f4:	a7 df       	rcall	.-178    	; 0x144 <sendString>
     1f6:	2f e3       	ldi	r18, 0x3F	; 63
     1f8:	8d e0       	ldi	r24, 0x0D	; 13
     1fa:	93 e0       	ldi	r25, 0x03	; 3
     1fc:	21 50       	subi	r18, 0x01	; 1
     1fe:	80 40       	sbci	r24, 0x00	; 0
     200:	90 40       	sbci	r25, 0x00	; 0
     202:	e1 f7       	brne	.-8      	; 0x1fc <virtualTerminal+0x3c>
     204:	00 c0       	rjmp	.+0      	; 0x206 <virtualTerminal+0x46>
     206:	00 00       	nop
     208:	08 95       	ret

0000020a <UART_Receive>:
     20a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	_delay_ms(1000); // Delay for 1 second
}

// UART character receive function
char UART_Receive() {
	while (!(UCSR0A & (1 << RXC0))); // Wait for data to be received
     20e:	88 23       	and	r24, r24
     210:	e4 f7       	brge	.-8      	; 0x20a <UART_Receive>
	return UDR0; // Return the received data
     212:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
}
     216:	08 95       	ret

00000218 <clearEEPROM>:

// Function to clear EEPROM
void clearEEPROM() {
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
	for (uint16_t addr = 0; addr < E2END; addr++) {
     21c:	c0 e0       	ldi	r28, 0x00	; 0
     21e:	d0 e0       	ldi	r29, 0x00	; 0
     220:	05 c0       	rjmp	.+10     	; 0x22c <clearEEPROM+0x14>
		eeprom_update_byte((uint8_t *)addr, 0xFF);
     222:	6f ef       	ldi	r22, 0xFF	; 255
     224:	ce 01       	movw	r24, r28
     226:	0e 94 a4 0c 	call	0x1948	; 0x1948 <eeprom_update_byte>
	return UDR0; // Return the received data
}

// Function to clear EEPROM
void clearEEPROM() {
	for (uint16_t addr = 0; addr < E2END; addr++) {
     22a:	21 96       	adiw	r28, 0x01	; 1
     22c:	cf 3f       	cpi	r28, 0xFF	; 255
     22e:	8f e0       	ldi	r24, 0x0F	; 15
     230:	d8 07       	cpc	r29, r24
     232:	b8 f3       	brcs	.-18     	; 0x222 <clearEEPROM+0xa>
		eeprom_update_byte((uint8_t *)addr, 0xFF);
	}
}
     234:	df 91       	pop	r29
     236:	cf 91       	pop	r28
     238:	08 95       	ret

0000023a <setLoginPassword>:

// Set login password in EEPROM
void setLoginPassword(const char* password) {
	eeprom_update_block(password, (void*)PASSWORD_EEPROM_ADDRESS, strlen(password) + 1);
     23a:	fc 01       	movw	r30, r24
     23c:	01 90       	ld	r0, Z+
     23e:	00 20       	and	r0, r0
     240:	e9 f7       	brne	.-6      	; 0x23c <setLoginPassword+0x2>
     242:	31 97       	sbiw	r30, 0x01	; 1
     244:	af 01       	movw	r20, r30
     246:	48 1b       	sub	r20, r24
     248:	59 0b       	sbc	r21, r25
     24a:	4f 5f       	subi	r20, 0xFF	; 255
     24c:	5f 4f       	sbci	r21, 0xFF	; 255
     24e:	60 e1       	ldi	r22, 0x10	; 16
     250:	70 e0       	ldi	r23, 0x00	; 0
     252:	0c 94 95 0c 	jmp	0x192a	; 0x192a <eeprom_update_block>
     256:	08 95       	ret

00000258 <login>:
}

// Login function
int login() {
     258:	0f 93       	push	r16
     25a:	1f 93       	push	r17
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
     260:	cd b7       	in	r28, 0x3d	; 61
     262:	de b7       	in	r29, 0x3e	; 62
     264:	a8 97       	sbiw	r28, 0x28	; 40
     266:	0f b6       	in	r0, 0x3f	; 63
     268:	f8 94       	cli
     26a:	de bf       	out	0x3e, r29	; 62
     26c:	0f be       	out	0x3f, r0	; 63
     26e:	cd bf       	out	0x3d, r28	; 61
	sendString("Enter the password: ");
     270:	82 ef       	ldi	r24, 0xF2	; 242
     272:	93 e0       	ldi	r25, 0x03	; 3
     274:	67 df       	rcall	.-306    	; 0x144 <sendString>
	char enteredPassword[20];
	int i = 0;
     276:	00 e0       	ldi	r16, 0x00	; 0

	// Receive and process the entered password
	while (1) {
		char c = UART_Receive();
     278:	10 e0       	ldi	r17, 0x00	; 0
     27a:	c7 df       	rcall	.-114    	; 0x20a <UART_Receive>
		if (c == '\r' || c == '\n') {
     27c:	8d 30       	cpi	r24, 0x0D	; 13
     27e:	11 f0       	breq	.+4      	; 0x284 <login+0x2c>
     280:	8a 30       	cpi	r24, 0x0A	; 10
     282:	c1 f4       	brne	.+48     	; 0x2b4 <login+0x5c>
			enteredPassword[i] = '\0';
     284:	e1 e0       	ldi	r30, 0x01	; 1
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	ec 0f       	add	r30, r28
     28a:	fd 1f       	adc	r31, r29
     28c:	e0 0f       	add	r30, r16
     28e:	f1 1f       	adc	r31, r17
     290:	10 82       	st	Z, r1
		i++;
	}

	// Retrieve the password from EEPROM
	char storedPassword[20];
	eeprom_read_block(storedPassword, (void*)PASSWORD_EEPROM_ADDRESS, sizeof(storedPassword));
     292:	44 e1       	ldi	r20, 0x14	; 20
     294:	50 e0       	ldi	r21, 0x00	; 0
     296:	60 e1       	ldi	r22, 0x10	; 16
     298:	70 e0       	ldi	r23, 0x00	; 0
     29a:	ce 01       	movw	r24, r28
     29c:	45 96       	adiw	r24, 0x15	; 21
     29e:	0e 94 80 0c 	call	0x1900	; 0x1900 <eeprom_read_block>

	// Compare entered password to the stored password
	if (strcmp(enteredPassword, storedPassword) == 0) {
     2a2:	be 01       	movw	r22, r28
     2a4:	6b 5e       	subi	r22, 0xEB	; 235
     2a6:	7f 4f       	sbci	r23, 0xFF	; 255
     2a8:	ce 01       	movw	r24, r28
     2aa:	01 96       	adiw	r24, 0x01	; 1
     2ac:	b8 d7       	rcall	.+3952   	; 0x121e <strcmp>
     2ae:	89 2b       	or	r24, r25
     2b0:	89 f4       	brne	.+34     	; 0x2d4 <login+0x7c>
     2b2:	0a c0       	rjmp	.+20     	; 0x2c8 <login+0x70>
		char c = UART_Receive();
		if (c == '\r' || c == '\n') {
			enteredPassword[i] = '\0';
			break;
		}
		enteredPassword[i] = c;
     2b4:	e1 e0       	ldi	r30, 0x01	; 1
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	ec 0f       	add	r30, r28
     2ba:	fd 1f       	adc	r31, r29
     2bc:	e0 0f       	add	r30, r16
     2be:	f1 1f       	adc	r31, r17
     2c0:	80 83       	st	Z, r24
		i++;
     2c2:	0f 5f       	subi	r16, 0xFF	; 255
     2c4:	1f 4f       	sbci	r17, 0xFF	; 255
	}
     2c6:	d9 cf       	rjmp	.-78     	; 0x27a <login+0x22>
	char storedPassword[20];
	eeprom_read_block(storedPassword, (void*)PASSWORD_EEPROM_ADDRESS, sizeof(storedPassword));

	// Compare entered password to the stored password
	if (strcmp(enteredPassword, storedPassword) == 0) {
		sendString("Login successful. Access granted.\r\n");
     2c8:	87 e0       	ldi	r24, 0x07	; 7
     2ca:	94 e0       	ldi	r25, 0x04	; 4
     2cc:	3b df       	rcall	.-394    	; 0x144 <sendString>
		return 1;
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	90 e0       	ldi	r25, 0x00	; 0
		} else {
		sendString("Login failed. Access denied.\r\n");
     2d2:	05 c0       	rjmp	.+10     	; 0x2de <login+0x86>
     2d4:	8b e2       	ldi	r24, 0x2B	; 43
     2d6:	94 e0       	ldi	r25, 0x04	; 4
     2d8:	35 df       	rcall	.-406    	; 0x144 <sendString>
		return 0;
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     2de:	a8 96       	adiw	r28, 0x28	; 40
     2e0:	0f b6       	in	r0, 0x3f	; 63
     2e2:	f8 94       	cli
     2e4:	de bf       	out	0x3e, r29	; 62
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	cd bf       	out	0x3d, r28	; 61
     2ea:	df 91       	pop	r29
     2ec:	cf 91       	pop	r28
     2ee:	1f 91       	pop	r17
     2f0:	0f 91       	pop	r16
     2f2:	08 95       	ret

000002f4 <latch>:
void latch() {
	PORTH |= (1 << PH7);
     2f4:	e2 e0       	ldi	r30, 0x02	; 2
     2f6:	f1 e0       	ldi	r31, 0x01	; 1
     2f8:	80 81       	ld	r24, Z
     2fa:	80 68       	ori	r24, 0x80	; 128
     2fc:	80 83       	st	Z, r24
     2fe:	83 ec       	ldi	r24, 0xC3	; 195
     300:	99 e0       	ldi	r25, 0x09	; 9
     302:	01 97       	sbiw	r24, 0x01	; 1
     304:	f1 f7       	brne	.-4      	; 0x302 <latch+0xe>
     306:	00 c0       	rjmp	.+0      	; 0x308 <latch+0x14>
     308:	00 00       	nop
	_delay_ms(10);
	PORTH &= ~(1 << PH7);
     30a:	80 81       	ld	r24, Z
     30c:	8f 77       	andi	r24, 0x7F	; 127
     30e:	80 83       	st	Z, r24
     310:	83 ec       	ldi	r24, 0xC3	; 195
     312:	99 e0       	ldi	r25, 0x09	; 9
     314:	01 97       	sbiw	r24, 0x01	; 1
     316:	f1 f7       	brne	.-4      	; 0x314 <latch+0x20>
     318:	00 c0       	rjmp	.+0      	; 0x31a <latch+0x26>
     31a:	00 00       	nop
     31c:	08 95       	ret

0000031e <latch2>:
	_delay_ms(10);
	
}
void latch2() {
		PORTB |= (1 << PB7);
     31e:	85 b1       	in	r24, 0x05	; 5
     320:	80 68       	ori	r24, 0x80	; 128
     322:	85 b9       	out	0x05, r24	; 5
     324:	83 ec       	ldi	r24, 0xC3	; 195
     326:	99 e0       	ldi	r25, 0x09	; 9
     328:	01 97       	sbiw	r24, 0x01	; 1
     32a:	f1 f7       	brne	.-4      	; 0x328 <latch2+0xa>
     32c:	00 c0       	rjmp	.+0      	; 0x32e <latch2+0x10>
     32e:	00 00       	nop
		_delay_ms(10);
	PORTB &= ~(1 << PB7);
     330:	85 b1       	in	r24, 0x05	; 5
     332:	8f 77       	andi	r24, 0x7F	; 127
     334:	85 b9       	out	0x05, r24	; 5
     336:	83 ec       	ldi	r24, 0xC3	; 195
     338:	99 e0       	ldi	r25, 0x09	; 9
     33a:	01 97       	sbiw	r24, 0x01	; 1
     33c:	f1 f7       	brne	.-4      	; 0x33a <latch2+0x1c>
     33e:	00 c0       	rjmp	.+0      	; 0x340 <latch2+0x22>
     340:	00 00       	nop
     342:	08 95       	ret

00000344 <regInprog>:
		PORTK ^=(1<<PK0);
		_delay_ms(850);
	}
	
}
void regInprog(){
     344:	cf 93       	push	r28
     346:	df 93       	push	r29
	PORTB &= ~(1 << PB5);
     348:	85 b1       	in	r24, 0x05	; 5
     34a:	8f 7d       	andi	r24, 0xDF	; 223
     34c:	85 b9       	out	0x05, r24	; 5
	PORTA = 0X01;
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	82 b9       	out	0x02, r24	; 2
	latch2();
     352:	e5 df       	rcall	.-54     	; 0x31e <latch2>
	PORTA = 0XC0;
     354:	80 ec       	ldi	r24, 0xC0	; 192
	latch2();
     356:	82 b9       	out	0x02, r24	; 2
     358:	e2 df       	rcall	.-60     	; 0x31e <latch2>
	// Data mode
	PORTB |= (1 << PB5);
     35a:	85 b1       	in	r24, 0x05	; 5
     35c:	80 62       	ori	r24, 0x20	; 32
     35e:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << PB6);
     360:	85 b1       	in	r24, 0x05	; 5
     362:	8f 7b       	andi	r24, 0xBF	; 191
     364:	85 b9       	out	0x05, r24	; 5
	for (int x =0; x<12; x++)
     366:	c0 e0       	ldi	r28, 0x00	; 0
     368:	d0 e0       	ldi	r29, 0x00	; 0
     36a:	07 c0       	rjmp	.+14     	; 0x37a <regInprog+0x36>
	{
		PORTA = regInProg[x];
     36c:	fe 01       	movw	r30, r28
     36e:	ee 5f       	subi	r30, 0xFE	; 254
     370:	fd 4f       	sbci	r31, 0xFD	; 253
     372:	80 81       	ld	r24, Z
		latch2();
     374:	82 b9       	out	0x02, r24	; 2
     376:	d3 df       	rcall	.-90     	; 0x31e <latch2>
	PORTA = 0XC0;
	latch2();
	// Data mode
	PORTB |= (1 << PB5);
	PORTB &= ~(1 << PB6);
	for (int x =0; x<12; x++)
     378:	21 96       	adiw	r28, 0x01	; 1
     37a:	cc 30       	cpi	r28, 0x0C	; 12
     37c:	d1 05       	cpc	r29, r1
     37e:	b4 f3       	brlt	.-20     	; 0x36c <regInprog+0x28>
	{
		PORTA = regInProg[x];
		latch2();
	}

}
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	08 95       	ret

00000386 <gateOpen>:
void gateOpen(){
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
	PORTB &= ~(1 << PB5);
     38a:	85 b1       	in	r24, 0x05	; 5
     38c:	8f 7d       	andi	r24, 0xDF	; 223
     38e:	85 b9       	out	0x05, r24	; 5
	PORTA = 0X01;
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	82 b9       	out	0x02, r24	; 2
	latch2();
     394:	c4 df       	rcall	.-120    	; 0x31e <latch2>
	PORTA = 0XC0;
     396:	80 ec       	ldi	r24, 0xC0	; 192
	latch2();
     398:	82 b9       	out	0x02, r24	; 2
     39a:	c1 df       	rcall	.-126    	; 0x31e <latch2>
	// Data mode
	PORTB |= (1 << PB5);
     39c:	85 b1       	in	r24, 0x05	; 5
     39e:	80 62       	ori	r24, 0x20	; 32
     3a0:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << PB6);
     3a2:	85 b1       	in	r24, 0x05	; 5
     3a4:	8f 7b       	andi	r24, 0xBF	; 191
     3a6:	85 b9       	out	0x05, r24	; 5
	for (int x =0; x<12; x++)
     3a8:	c0 e0       	ldi	r28, 0x00	; 0
     3aa:	d0 e0       	ldi	r29, 0x00	; 0
     3ac:	07 c0       	rjmp	.+14     	; 0x3bc <gateOpen+0x36>
	{
		PORTA = open[x];
     3ae:	fe 01       	movw	r30, r28
     3b0:	e5 5e       	subi	r30, 0xE5	; 229
     3b2:	fd 4f       	sbci	r31, 0xFD	; 253
     3b4:	80 81       	ld	r24, Z
		latch2();
     3b6:	82 b9       	out	0x02, r24	; 2
     3b8:	b2 df       	rcall	.-156    	; 0x31e <latch2>
	PORTA = 0XC0;
	latch2();
	// Data mode
	PORTB |= (1 << PB5);
	PORTB &= ~(1 << PB6);
	for (int x =0; x<12; x++)
     3ba:	21 96       	adiw	r28, 0x01	; 1
     3bc:	cc 30       	cpi	r28, 0x0C	; 12
     3be:	d1 05       	cpc	r29, r1
     3c0:	b4 f3       	brlt	.-20     	; 0x3ae <gateOpen+0x28>
	{
		PORTA = open[x];
		latch2();
	}

}
     3c2:	df 91       	pop	r29
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <gateclose>:
void gateclose(){
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
	PORTB &= ~(1 << PB5);
     3cc:	85 b1       	in	r24, 0x05	; 5
     3ce:	8f 7d       	andi	r24, 0xDF	; 223
     3d0:	85 b9       	out	0x05, r24	; 5
	PORTA = 0X01;
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	82 b9       	out	0x02, r24	; 2
	latch2();
     3d6:	a3 df       	rcall	.-186    	; 0x31e <latch2>
	PORTA = 0XC0;
     3d8:	80 ec       	ldi	r24, 0xC0	; 192
	latch2();
     3da:	82 b9       	out	0x02, r24	; 2
     3dc:	a0 df       	rcall	.-192    	; 0x31e <latch2>
	// Data mode
	PORTB |= (1 << PB5);
     3de:	85 b1       	in	r24, 0x05	; 5
     3e0:	80 62       	ori	r24, 0x20	; 32
     3e2:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << PB6);
     3e4:	85 b1       	in	r24, 0x05	; 5
     3e6:	8f 7b       	andi	r24, 0xBF	; 191
     3e8:	85 b9       	out	0x05, r24	; 5
	for (int x =0; x<12; x++)
     3ea:	c0 e0       	ldi	r28, 0x00	; 0
     3ec:	d0 e0       	ldi	r29, 0x00	; 0
     3ee:	07 c0       	rjmp	.+14     	; 0x3fe <gateclose+0x36>
	{
		PORTA = close[x];
     3f0:	fe 01       	movw	r30, r28
     3f2:	e8 5d       	subi	r30, 0xD8	; 216
     3f4:	fd 4f       	sbci	r31, 0xFD	; 253
     3f6:	80 81       	ld	r24, Z
		latch2();
     3f8:	82 b9       	out	0x02, r24	; 2
     3fa:	91 df       	rcall	.-222    	; 0x31e <latch2>
	PORTA = 0XC0;
	latch2();
	// Data mode
	PORTB |= (1 << PB5);
	PORTB &= ~(1 << PB6);
	for (int x =0; x<12; x++)
     3fc:	21 96       	adiw	r28, 0x01	; 1
     3fe:	cc 30       	cpi	r28, 0x0C	; 12
     400:	d1 05       	cpc	r29, r1
     402:	b4 f3       	brlt	.-20     	; 0x3f0 <gateclose+0x28>
	{
		PORTA = close[x];
		latch2();
	}
	
}
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	08 95       	ret

0000040a <executeAfterOption6>:
void executeAfterOption6() {
	
	// Call the gateOpenCloses() function after the 3-second delay
	
	gateclose();
     40a:	de cf       	rjmp	.-68     	; 0x3c8 <gateclose>
     40c:	08 95       	ret

0000040e <displayParkFullStatus>:
	_delay_ms(10);

}
void displayParkFullStatus() {
	// Check if the park is full based on the number of registered vehicles
	if (registeredVehicles >= MAX_CARS) {
     40e:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <registeredVehicles>
     412:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <registeredVehicles+0x1>
     416:	05 97       	sbiw	r24, 0x05	; 5
     418:	24 f0       	brlt	.+8      	; 0x422 <displayParkFullStatus+0x14>
		sendString("The park is full.\r\n");
     41a:	8a e4       	ldi	r24, 0x4A	; 74
     41c:	94 e0       	ldi	r25, 0x04	; 4
     41e:	92 ce       	rjmp	.-732    	; 0x144 <sendString>
     420:	08 95       	ret
		} else {
		sendString("The park is not full. There is space for more vehicles.\r\n");
     422:	8e e5       	ldi	r24, 0x5E	; 94
     424:	94 e0       	ldi	r25, 0x04	; 4
     426:	8e ce       	rjmp	.-740    	; 0x144 <sendString>
     428:	08 95       	ret

0000042a <stopContin>:
	}
}
void stopContin(){
	 if (shouldExecuteAfterOption6) {
     42a:	80 91 ae 08 	lds	r24, 0x08AE	; 0x8008ae <shouldExecuteAfterOption6>
     42e:	90 91 af 08 	lds	r25, 0x08AF	; 0x8008af <shouldExecuteAfterOption6+0x1>
     432:	89 2b       	or	r24, r25
     434:	79 f0       	breq	.+30     	; 0x454 <stopContin+0x2a>
		 gateOpen();
     436:	a7 df       	rcall	.-178    	; 0x386 <gateOpen>
     438:	2f e7       	ldi	r18, 0x7F	; 127
     43a:	86 e9       	ldi	r24, 0x96	; 150
     43c:	98 e9       	ldi	r25, 0x98	; 152
     43e:	21 50       	subi	r18, 0x01	; 1
     440:	80 40       	sbci	r24, 0x00	; 0
     442:	90 40       	sbci	r25, 0x00	; 0
     444:	e1 f7       	brne	.-8      	; 0x43e <stopContin+0x14>
     446:	00 c0       	rjmp	.+0      	; 0x448 <stopContin+0x1e>
		 _delay_ms(50000);
		 executeAfterOption6(); // Call the function to execute the code
     448:	00 00       	nop
     44a:	df df       	rcall	.-66     	; 0x40a <executeAfterOption6>
		 shouldExecuteAfterOption6 = 0; // Reset the flag
     44c:	10 92 af 08 	sts	0x08AF, r1	; 0x8008af <shouldExecuteAfterOption6+0x1>
     450:	10 92 ae 08 	sts	0x08AE, r1	; 0x8008ae <shouldExecuteAfterOption6>
     454:	08 95       	ret

00000456 <printLcdFridge>:
			
		}
	}
}

void printLcdFridge(char* word){
     456:	0f 93       	push	r16
     458:	1f 93       	push	r17
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	8c 01       	movw	r16, r24
	PORTH |=(1<<PH5);
     460:	e2 e0       	ldi	r30, 0x02	; 2
     462:	f1 e0       	ldi	r31, 0x01	; 1
     464:	80 81       	ld	r24, Z
     466:	80 62       	ori	r24, 0x20	; 32
     468:	80 83       	st	Z, r24
	int x=0;
     46a:	c0 e0       	ldi	r28, 0x00	; 0
     46c:	d0 e0       	ldi	r29, 0x00	; 0
	while(word[x] != 0){
     46e:	04 c0       	rjmp	.+8      	; 0x478 <printLcdFridge+0x22>
		PORTJ = word[x];
     470:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
		latch();
     474:	3f df       	rcall	.-386    	; 0x2f4 <latch>
		x++;
     476:	21 96       	adiw	r28, 0x01	; 1
}

void printLcdFridge(char* word){
	PORTH |=(1<<PH5);
	int x=0;
	while(word[x] != 0){
     478:	f8 01       	movw	r30, r16
     47a:	ec 0f       	add	r30, r28
     47c:	fd 1f       	adc	r31, r29
     47e:	80 81       	ld	r24, Z
     480:	81 11       	cpse	r24, r1
     482:	f6 cf       	rjmp	.-20     	; 0x470 <printLcdFridge+0x1a>
		PORTJ = word[x];
		latch();
		x++;
	}
	
}
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	1f 91       	pop	r17
     48a:	0f 91       	pop	r16
     48c:	08 95       	ret

0000048e <displayMenu>:
		 executeAfterOption6(); // Call the function to execute the code
		 shouldExecuteAfterOption6 = 0; // Reset the flag
	 }
}

void displayMenu() {
     48e:	2f 92       	push	r2
     490:	3f 92       	push	r3
     492:	4f 92       	push	r4
     494:	5f 92       	push	r5
     496:	6f 92       	push	r6
     498:	7f 92       	push	r7
     49a:	8f 92       	push	r8
     49c:	9f 92       	push	r9
     49e:	af 92       	push	r10
     4a0:	bf 92       	push	r11
     4a2:	cf 92       	push	r12
     4a4:	df 92       	push	r13
     4a6:	ef 92       	push	r14
     4a8:	ff 92       	push	r15
     4aa:	0f 93       	push	r16
     4ac:	1f 93       	push	r17
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	cd b7       	in	r28, 0x3d	; 61
     4b4:	de b7       	in	r29, 0x3e	; 62
     4b6:	c3 5d       	subi	r28, 0xD3	; 211
     4b8:	d1 09       	sbc	r29, r1
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	f8 94       	cli
     4be:	de bf       	out	0x3e, r29	; 62
     4c0:	0f be       	out	0x3f, r0	; 63
     4c2:	cd bf       	out	0x3d, r28	; 61
	int loggedIn = 0; // Initialize as not logged in
	int totalVisitors = 0;
	int carCounter = 0;
	int MAX_CARS =5;
	int cumulativeGrandTotal = 0;
     4c4:	c2 53       	subi	r28, 0x32	; 50
     4c6:	df 4f       	sbci	r29, 0xFF	; 255
     4c8:	19 82       	std	Y+1, r1	; 0x01
     4ca:	18 82       	st	Y, r1
     4cc:	ce 5c       	subi	r28, 0xCE	; 206
     4ce:	d0 40       	sbci	r29, 0x00	; 0
}

void displayMenu() {
	int loggedIn = 0; // Initialize as not logged in
	int totalVisitors = 0;
	int carCounter = 0;
     4d0:	e1 2c       	mov	r14, r1
     4d2:	f1 2c       	mov	r15, r1
	 }
}

void displayMenu() {
	int loggedIn = 0; // Initialize as not logged in
	int totalVisitors = 0;
     4d4:	41 2c       	mov	r4, r1
     4d6:	51 2c       	mov	r5, r1
		 shouldExecuteAfterOption6 = 0; // Reset the flag
	 }
}

void displayMenu() {
	int loggedIn = 0; // Initialize as not logged in
     4d8:	c1 2c       	mov	r12, r1
     4da:	d1 2c       	mov	r13, r1
	char numberPlates[MAX_CARS][3]; // Assuming a maximum of MAX_CARS cars

	while (1) {
		
		//lcd 2
		PORTB &= ~(1 << PB5);
     4dc:	85 b1       	in	r24, 0x05	; 5
     4de:	8f 7d       	andi	r24, 0xDF	; 223
     4e0:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << PB6);
     4e2:	85 b1       	in	r24, 0x05	; 5
     4e4:	8f 7b       	andi	r24, 0xBF	; 191
     4e6:	85 b9       	out	0x05, r24	; 5
		PORTA = 0B00001110;
     4e8:	8e e0       	ldi	r24, 0x0E	; 14
     4ea:	82 b9       	out	0x02, r24	; 2
		latch2();
     4ec:	18 df       	rcall	.-464    	; 0x31e <latch2>
		
		// Data mode
		PORTH |= (1 << PH5);
     4ee:	e2 e0       	ldi	r30, 0x02	; 2
     4f0:	f1 e0       	ldi	r31, 0x01	; 1
     4f2:	80 81       	ld	r24, Z
     4f4:	80 62       	ori	r24, 0x20	; 32
     4f6:	80 83       	st	Z, r24
		PORTH &= ~(1 << PH6);
     4f8:	80 81       	ld	r24, Z
     4fa:	8f 7b       	andi	r24, 0xBF	; 191
     4fc:	80 83       	st	Z, r24

		// Print "car" on the LCD
		printLcdFridge("FRIDGE, ENTER");
     4fe:	88 e9       	ldi	r24, 0x98	; 152
     500:	94 e0       	ldi	r25, 0x04	; 4
     502:	a9 df       	rcall	.-174    	; 0x456 <printLcdFridge>
		PORTB &= ~(1 << PB5);
     504:	85 b1       	in	r24, 0x05	; 5
     506:	8f 7d       	andi	r24, 0xDF	; 223
     508:	85 b9       	out	0x05, r24	; 5
		PORTJ = 0XC0;
     50a:	05 e0       	ldi	r16, 0x05	; 5
     50c:	11 e0       	ldi	r17, 0x01	; 1
     50e:	80 ec       	ldi	r24, 0xC0	; 192
     510:	f8 01       	movw	r30, r16
		latch();
     512:	80 83       	st	Z, r24
		printLcdFridge("THE NUMBER OF ");
     514:	ef de       	rcall	.-546    	; 0x2f4 <latch>
     516:	86 ea       	ldi	r24, 0xA6	; 166
     518:	94 e0       	ldi	r25, 0x04	; 4
     51a:	9d df       	rcall	.-198    	; 0x456 <printLcdFridge>
		PORTB &= ~(1 << PB5);
     51c:	85 b1       	in	r24, 0x05	; 5
     51e:	8f 7d       	andi	r24, 0xDF	; 223
		PORTJ = 0X90;
     520:	85 b9       	out	0x05, r24	; 5
     522:	80 e9       	ldi	r24, 0x90	; 144
		latch();
     524:	f8 01       	movw	r30, r16
     526:	80 83       	st	Z, r24
		printLcdFridge("BOTTLES");
     528:	e5 de       	rcall	.-566    	; 0x2f4 <latch>
     52a:	85 eb       	ldi	r24, 0xB5	; 181
     52c:	94 e0       	ldi	r25, 0x04	; 4
     52e:	93 df       	rcall	.-218    	; 0x456 <printLcdFridge>


		 if (carCounter >= MAX_CARS) {
     530:	f5 e0       	ldi	r31, 0x05	; 5
     532:	ef 16       	cp	r14, r31
     534:	f1 04       	cpc	r15, r1
			 sendString("Maximum number of cars reached. Registration is closed.\r\n");
     536:	4c f0       	brlt	.+18     	; 0x54a <displayMenu+0xbc>
     538:	8d eb       	ldi	r24, 0xBD	; 189
     53a:	94 e0       	ldi	r25, 0x04	; 4
     53c:	03 de       	rcall	.-1018   	; 0x144 <sendString>
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	f8 94       	cli
     542:	de bf       	out	0x3e, r29	; 62
     544:	0f be       	out	0x3f, r0	; 63
     546:	cd bf       	out	0x3d, r28	; 61
			 break; // Skip registration and continue to the next iteration
		 }
		// Display the menu
		if (!loggedIn) {
     548:	a0 c3       	rjmp	.+1856   	; 0xc8a <displayMenu+0x7fc>
     54a:	c1 14       	cp	r12, r1
     54c:	d1 04       	cpc	r13, r1
			sendString("Please login to continue.\r\n");
     54e:	89 f4       	brne	.+34     	; 0x572 <displayMenu+0xe4>
     550:	87 ef       	ldi	r24, 0xF7	; 247
     552:	94 e0       	ldi	r25, 0x04	; 4
			int loginSuccess = login(); // Perform login
     554:	f7 dd       	rcall	.-1042   	; 0x144 <sendString>
     556:	80 de       	rcall	.-768    	; 0x258 <login>
			if (loginSuccess) {
     558:	89 2b       	or	r24, r25
     55a:	39 f0       	breq	.+14     	; 0x56a <displayMenu+0xdc>
				loggedIn = 1;
				sendString("Login successful. You can now access the functionalities.\r\n");
     55c:	83 e1       	ldi	r24, 0x13	; 19
     55e:	95 e0       	ldi	r25, 0x05	; 5
     560:	f1 dd       	rcall	.-1054   	; 0x144 <sendString>
		// Display the menu
		if (!loggedIn) {
			sendString("Please login to continue.\r\n");
			int loginSuccess = login(); // Perform login
			if (loginSuccess) {
				loggedIn = 1;
     562:	cc 24       	eor	r12, r12
     564:	c3 94       	inc	r12
				sendString("Login successful. You can now access the functionalities.\r\n");
				} else {
				sendString("Login failed. Please try again.\r\n");
     566:	d1 2c       	mov	r13, r1
     568:	b9 cf       	rjmp	.-142    	; 0x4dc <displayMenu+0x4e>
     56a:	8f e4       	ldi	r24, 0x4F	; 79
     56c:	95 e0       	ldi	r25, 0x05	; 5
     56e:	ea dd       	rcall	.-1068   	; 0x144 <sendString>
			}
			} else {
				
			sendString("Enter your choice: ");
     570:	b5 cf       	rjmp	.-150    	; 0x4dc <displayMenu+0x4e>
     572:	81 e7       	ldi	r24, 0x71	; 113
     574:	95 e0       	ldi	r25, 0x05	; 5
     576:	e6 dd       	rcall	.-1076   	; 0x144 <sendString>
			char choice = UART_Receive();
     578:	48 de       	rcall	.-880    	; 0x20a <UART_Receive>

			switch (choice) {
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	fc 01       	movw	r30, r24
     57e:	f1 97       	sbiw	r30, 0x31	; 49
     580:	e8 30       	cpi	r30, 0x08	; 8
     582:	f1 05       	cpc	r31, r1
     584:	08 f0       	brcs	.+2      	; 0x588 <displayMenu+0xfa>
     586:	7d c3       	rjmp	.+1786   	; 0xc82 <displayMenu+0x7f4>
     588:	88 27       	eor	r24, r24
     58a:	ee 58       	subi	r30, 0x8E	; 142
     58c:	ff 4f       	sbci	r31, 0xFF	; 255
				case '1':
				loggedIn = login(); // Allow re-login
     58e:	8f 4f       	sbci	r24, 0xFF	; 255
     590:	21 c6       	rjmp	.+3138   	; 0x11d4 <__tablejump2__>
     592:	62 de       	rcall	.-828    	; 0x258 <login>
				break;
     594:	6c 01       	movw	r12, r24

				case '2':
				regInprog();
     596:	a2 cf       	rjmp	.-188    	; 0x4dc <displayMenu+0x4e>
     598:	d5 de       	rcall	.-598    	; 0x344 <regInprog>
				// Registration section
				sendString("Enter the number plate: ");
     59a:	85 e8       	ldi	r24, 0x85	; 133
     59c:	95 e0       	ldi	r25, 0x05	; 5
     59e:	d2 dd       	rcall	.-1116   	; 0x144 <sendString>
     5a0:	00 e0       	ldi	r16, 0x00	; 0
				char numberPlate[10];
				int plateLength = 8;

				// Receive and process the number plate
				int i = 0;
     5a2:	10 e0       	ldi	r17, 0x00	; 0
     5a4:	32 de       	rcall	.-924    	; 0x20a <UART_Receive>
				while (1) {
					char c = UART_Receive();
     5a6:	8d 30       	cpi	r24, 0x0D	; 13
     5a8:	61 f0       	breq	.+24     	; 0x5c2 <displayMenu+0x134>
					if (c == '\r' || c == '\n') {
     5aa:	8a 30       	cpi	r24, 0x0A	; 10
     5ac:	51 f0       	breq	.+20     	; 0x5c2 <displayMenu+0x134>
     5ae:	e2 eb       	ldi	r30, 0xB2	; 178
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
						break;
					}
					numberPlate[i] = c;
     5b2:	ec 0f       	add	r30, r28
     5b4:	fd 1f       	adc	r31, r29
     5b6:	e0 0f       	add	r30, r16
     5b8:	f1 1f       	adc	r31, r17
     5ba:	80 83       	st	Z, r24
     5bc:	0f 5f       	subi	r16, 0xFF	; 255
     5be:	1f 4f       	sbci	r17, 0xFF	; 255
					i++;
     5c0:	f1 cf       	rjmp	.-30     	; 0x5a4 <displayMenu+0x116>
     5c2:	e2 eb       	ldi	r30, 0xB2	; 178
				}
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
				numberPlate[i] = '\0';
     5c6:	ec 0f       	add	r30, r28
     5c8:	fd 1f       	adc	r31, r29
     5ca:	e0 0f       	add	r30, r16
     5cc:	f1 1f       	adc	r31, r17
     5ce:	10 82       	st	Z, r1
     5d0:	00 e0       	ldi	r16, 0x00	; 0
				plateLength = i;

				// Check if the number plate is already registered
				int plateExists = 0;
				for (int j = 0; j < carCounter; j++) {
     5d2:	10 e0       	ldi	r17, 0x00	; 0
     5d4:	13 c0       	rjmp	.+38     	; 0x5fc <displayMenu+0x16e>
     5d6:	b8 01       	movw	r22, r16
					if (strcmp(numberPlate, numberPlates[j]) == 0) {
     5d8:	66 0f       	add	r22, r22
     5da:	77 1f       	adc	r23, r23
     5dc:	60 0f       	add	r22, r16
     5de:	71 1f       	adc	r23, r17
     5e0:	21 e0       	ldi	r18, 0x01	; 1
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	2c 0f       	add	r18, r28
     5e6:	3d 1f       	adc	r19, r29
     5e8:	62 0f       	add	r22, r18
     5ea:	73 1f       	adc	r23, r19
     5ec:	ce 01       	movw	r24, r28
     5ee:	8e 54       	subi	r24, 0x4E	; 78
     5f0:	9f 4f       	sbci	r25, 0xFF	; 255
     5f2:	15 d6       	rcall	.+3114   	; 0x121e <strcmp>
     5f4:	89 2b       	or	r24, r25
     5f6:	41 f0       	breq	.+16     	; 0x608 <displayMenu+0x17a>
     5f8:	0f 5f       	subi	r16, 0xFF	; 255
				numberPlate[i] = '\0';
				plateLength = i;

				// Check if the number plate is already registered
				int plateExists = 0;
				for (int j = 0; j < carCounter; j++) {
     5fa:	1f 4f       	sbci	r17, 0xFF	; 255
     5fc:	0e 15       	cp	r16, r14
     5fe:	1f 05       	cpc	r17, r15
     600:	54 f3       	brlt	.-44     	; 0x5d6 <displayMenu+0x148>
     602:	80 e0       	ldi	r24, 0x00	; 0
				}
				numberPlate[i] = '\0';
				plateLength = i;

				// Check if the number plate is already registered
				int plateExists = 0;
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	02 c0       	rjmp	.+4      	; 0x60c <displayMenu+0x17e>
     608:	81 e0       	ldi	r24, 0x01	; 1
				for (int j = 0; j < carCounter; j++) {
					if (strcmp(numberPlate, numberPlates[j]) == 0) {
						plateExists = 1;
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	89 2b       	or	r24, r25
						break;
					}
				}

				if (plateExists) {
     60e:	21 f0       	breq	.+8      	; 0x618 <displayMenu+0x18a>
     610:	8e e9       	ldi	r24, 0x9E	; 158
					sendString("This number plate is already registered.\r\n");
     612:	95 e0       	ldi	r25, 0x05	; 5
     614:	97 dd       	rcall	.-1234   	; 0x144 <sendString>
     616:	62 cf       	rjmp	.-316    	; 0x4dc <displayMenu+0x4e>
     618:	c7 01       	movw	r24, r14
					continue; // Skip registration and continue to the next iteration
				}

				// Store the number plate
				strncpy(numberPlates[carCounter], numberPlate, 10);
     61a:	88 0f       	add	r24, r24
     61c:	99 1f       	adc	r25, r25
     61e:	8e 0d       	add	r24, r14
     620:	9f 1d       	adc	r25, r15
     622:	4a e0       	ldi	r20, 0x0A	; 10
     624:	50 e0       	ldi	r21, 0x00	; 0
     626:	be 01       	movw	r22, r28
     628:	6e 54       	subi	r22, 0x4E	; 78
     62a:	7f 4f       	sbci	r23, 0xFF	; 255
     62c:	e1 e0       	ldi	r30, 0x01	; 1
     62e:	f0 e0       	ldi	r31, 0x00	; 0
     630:	ec 0f       	add	r30, r28
     632:	fd 1f       	adc	r31, r29
     634:	8e 0f       	add	r24, r30
     636:	9f 1f       	adc	r25, r31
     638:	02 d6       	rcall	.+3076   	; 0x123e <strncpy>
     63a:	8b e0       	ldi	r24, 0x0B	; 11
				// Store the number plate in EEPROM
				eeprom_update_block(numberPlate, (void *)(EEPROM_ADDRESS_numberPlate + carCounter * 11), 11);
     63c:	8e 9d       	mul	r24, r14
     63e:	50 01       	movw	r10, r0
     640:	8f 9d       	mul	r24, r15
     642:	b0 0c       	add	r11, r0
     644:	11 24       	eor	r1, r1
     646:	b5 01       	movw	r22, r10
     648:	60 5b       	subi	r22, 0xB0	; 176
     64a:	7f 4f       	sbci	r23, 0xFF	; 255
     64c:	4b e0       	ldi	r20, 0x0B	; 11
     64e:	50 e0       	ldi	r21, 0x00	; 0
     650:	ce 01       	movw	r24, r28
     652:	8e 54       	subi	r24, 0x4E	; 78
     654:	9f 4f       	sbci	r25, 0xFF	; 255
     656:	0e 94 95 0c 	call	0x192a	; 0x192a <eeprom_update_block>

				sendString("Enter the number of adults: ");
     65a:	89 ec       	ldi	r24, 0xC9	; 201
     65c:	95 e0       	ldi	r25, 0x05	; 5
     65e:	72 dd       	rcall	.-1308   	; 0x144 <sendString>
     660:	00 e0       	ldi	r16, 0x00	; 0
				char adultsInput[4]; // Maximum 3 digits for adults
				int adults = 0;

				// Receive and process the number of adults
				i = 0;
     662:	10 e0       	ldi	r17, 0x00	; 0
     664:	d2 dd       	rcall	.-1116   	; 0x20a <UART_Receive>
				while (1) {
					char c = UART_Receive();
     666:	8d 30       	cpi	r24, 0x0D	; 13
     668:	61 f0       	breq	.+24     	; 0x682 <displayMenu+0x1f4>
					if (c == '\r' || c == '\n') {
     66a:	8a 30       	cpi	r24, 0x0A	; 10
     66c:	51 f0       	breq	.+20     	; 0x682 <displayMenu+0x1f4>
     66e:	e8 ec       	ldi	r30, 0xC8	; 200
						break;
					}
					adultsInput[i] = c;
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	ec 0f       	add	r30, r28
     674:	fd 1f       	adc	r31, r29
     676:	e0 0f       	add	r30, r16
     678:	f1 1f       	adc	r31, r17
     67a:	80 83       	st	Z, r24
					i++;
     67c:	0f 5f       	subi	r16, 0xFF	; 255
     67e:	1f 4f       	sbci	r17, 0xFF	; 255
				}
				adultsInput[i] = '\0';
     680:	f1 cf       	rjmp	.-30     	; 0x664 <displayMenu+0x1d6>
     682:	e8 ec       	ldi	r30, 0xC8	; 200
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	ec 0f       	add	r30, r28
     688:	fd 1f       	adc	r31, r29
     68a:	e0 0f       	add	r30, r16
     68c:	f1 1f       	adc	r31, r17
				adults = atoi(adultsInput);
     68e:	10 82       	st	Z, r1
     690:	ce 01       	movw	r24, r28
     692:	88 53       	subi	r24, 0x38	; 56
     694:	9f 4f       	sbci	r25, 0xFF	; 255
     696:	a6 d5       	rcall	.+2892   	; 0x11e4 <atoi>
     698:	c0 53       	subi	r28, 0x30	; 48
     69a:	df 4f       	sbci	r29, 0xFF	; 255
     69c:	99 83       	std	Y+1, r25	; 0x01
     69e:	88 83       	st	Y, r24
     6a0:	c0 5d       	subi	r28, 0xD0	; 208
     6a2:	d0 40       	sbci	r29, 0x00	; 0

				sendString("Enter the number of children: ");
     6a4:	86 ee       	ldi	r24, 0xE6	; 230
     6a6:	95 e0       	ldi	r25, 0x05	; 5
     6a8:	4d dd       	rcall	.-1382   	; 0x144 <sendString>
     6aa:	00 e0       	ldi	r16, 0x00	; 0
				char childrenInput[4]; // Maximum 3 digits for children
				int children = 0;

				// Receive and process the number of children
				i = 0;
     6ac:	10 e0       	ldi	r17, 0x00	; 0
     6ae:	ad dd       	rcall	.-1190   	; 0x20a <UART_Receive>
				while (1) {
					char c = UART_Receive();
     6b0:	8d 30       	cpi	r24, 0x0D	; 13
					if (c == '\r' || c == '\n') {
     6b2:	61 f0       	breq	.+24     	; 0x6cc <displayMenu+0x23e>
     6b4:	8a 30       	cpi	r24, 0x0A	; 10
     6b6:	51 f0       	breq	.+20     	; 0x6cc <displayMenu+0x23e>
     6b8:	e4 ec       	ldi	r30, 0xC4	; 196
						break;
					}
					childrenInput[i] = c;
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	ec 0f       	add	r30, r28
     6be:	fd 1f       	adc	r31, r29
     6c0:	e0 0f       	add	r30, r16
     6c2:	f1 1f       	adc	r31, r17
     6c4:	80 83       	st	Z, r24
     6c6:	0f 5f       	subi	r16, 0xFF	; 255
					i++;
     6c8:	1f 4f       	sbci	r17, 0xFF	; 255
     6ca:	f1 cf       	rjmp	.-30     	; 0x6ae <displayMenu+0x220>
				}
     6cc:	e4 ec       	ldi	r30, 0xC4	; 196
				childrenInput[i] = '\0';
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	ec 0f       	add	r30, r28
     6d2:	fd 1f       	adc	r31, r29
     6d4:	e0 0f       	add	r30, r16
     6d6:	f1 1f       	adc	r31, r17
     6d8:	10 82       	st	Z, r1
     6da:	ce 01       	movw	r24, r28
				children = atoi(childrenInput);
     6dc:	8c 53       	subi	r24, 0x3C	; 60
     6de:	9f 4f       	sbci	r25, 0xFF	; 255
     6e0:	81 d5       	rcall	.+2818   	; 0x11e4 <atoi>
     6e2:	ce 52       	subi	r28, 0x2E	; 46
     6e4:	df 4f       	sbci	r29, 0xFF	; 255
     6e6:	99 83       	std	Y+1, r25	; 0x01
     6e8:	88 83       	st	Y, r24
     6ea:	c2 5d       	subi	r28, 0xD2	; 210
     6ec:	d0 40       	sbci	r29, 0x00	; 0
     6ee:	84 e6       	ldi	r24, 0x64	; 100
     6f0:	ce 52       	subi	r28, 0x2E	; 46

				// Calculate the total cost for adults and children
				int childCost = 100; // Cost per child
				int adultCost = 200; // Cost per adult
				int totalChildCost = children * childCost;
     6f2:	df 4f       	sbci	r29, 0xFF	; 255
     6f4:	28 81       	ld	r18, Y
     6f6:	39 81       	ldd	r19, Y+1	; 0x01
     6f8:	c2 5d       	subi	r28, 0xD2	; 210
     6fa:	d0 40       	sbci	r29, 0x00	; 0
     6fc:	82 9f       	mul	r24, r18
     6fe:	10 01       	movw	r2, r0
     700:	83 9f       	mul	r24, r19
     702:	30 0c       	add	r3, r0
     704:	11 24       	eor	r1, r1
     706:	88 ec       	ldi	r24, 0xC8	; 200
     708:	c0 53       	subi	r28, 0x30	; 48
				int totalAdultCost = adults * adultCost;
     70a:	df 4f       	sbci	r29, 0xFF	; 255
     70c:	e8 81       	ld	r30, Y
     70e:	f9 81       	ldd	r31, Y+1	; 0x01
     710:	c0 5d       	subi	r28, 0xD0	; 208
     712:	d0 40       	sbci	r29, 0x00	; 0
     714:	8e 9f       	mul	r24, r30
     716:	40 01       	movw	r8, r0
     718:	8f 9f       	mul	r24, r31
     71a:	90 0c       	add	r9, r0
     71c:	11 24       	eor	r1, r1
     71e:	9f 92       	push	r9
				
				 // Convert totalAdultCost to a string
				 char costString[12]; // Assuming a maximum of 11 characters for the cost
				 sprintf(costString, "%d", totalAdultCost);
     720:	8f 92       	push	r8
     722:	05 e0       	ldi	r16, 0x05	; 5
     724:	16 e0       	ldi	r17, 0x06	; 6
     726:	1f 93       	push	r17
     728:	0f 93       	push	r16
     72a:	9e 01       	movw	r18, r28
     72c:	2c 58       	subi	r18, 0x8C	; 140
     72e:	3f 4f       	sbci	r19, 0xFF	; 255
     730:	c4 53       	subi	r28, 0x34	; 52
     732:	df 4f       	sbci	r29, 0xFF	; 255
     734:	39 83       	std	Y+1, r19	; 0x01
     736:	28 83       	st	Y, r18
     738:	cc 5c       	subi	r28, 0xCC	; 204
     73a:	d0 40       	sbci	r29, 0x00	; 0
     73c:	3f 93       	push	r19
     73e:	2f 93       	push	r18
     740:	f4 d5       	rcall	.+3048   	; 0x132a <sprintf>
     742:	b5 01       	movw	r22, r10
				 // EEPROM write: Assuming EEPROM is large enough and you've included the necessary libraries
				 uint16_t eepromAddress = 0x110 + carCounter * 11;
     744:	60 5f       	subi	r22, 0xF0	; 240
     746:	7e 4f       	sbci	r23, 0xFE	; 254
     748:	4b e0       	ldi	r20, 0x0B	; 11
				 eeprom_update_block(costString, (void *)eepromAddress, 11);
     74a:	50 e0       	ldi	r21, 0x00	; 0
     74c:	ce 01       	movw	r24, r28
     74e:	8c 58       	subi	r24, 0x8C	; 140
     750:	9f 4f       	sbci	r25, 0xFF	; 255
     752:	0e 94 95 0c 	call	0x192a	; 0x192a <eeprom_update_block>
     756:	3f 92       	push	r3
				 
				 char chldtcostEE[12];
				 sprintf(chldtcostEE, "%d", totalChildCost);
     758:	2f 92       	push	r2
     75a:	1f 93       	push	r17
     75c:	0f 93       	push	r16
     75e:	8e 01       	movw	r16, r28
     760:	00 5f       	subi	r16, 0xF0	; 240
     762:	1f 4f       	sbci	r17, 0xFF	; 255
     764:	1f 93       	push	r17
     766:	0f 93       	push	r16
     768:	e0 d5       	rcall	.+3008   	; 0x132a <sprintf>
     76a:	b5 01       	movw	r22, r10
				 uint16_t eepromAddress1 = 0x130 + carCounter * 11;
     76c:	60 5d       	subi	r22, 0xD0	; 208
     76e:	7e 4f       	sbci	r23, 0xFE	; 254
     770:	4b e0       	ldi	r20, 0x0B	; 11
				 eeprom_update_block(chldtcostEE, (void *)eepromAddress1, 11);
     772:	50 e0       	ldi	r21, 0x00	; 0
     774:	c8 01       	movw	r24, r16
     776:	0e 94 95 0c 	call	0x192a	; 0x192a <eeprom_update_block>
     77a:	81 01       	movw	r16, r2

				// Calculate the grand total cost
				int grandTotal = totalChildCost + totalAdultCost;
     77c:	08 0d       	add	r16, r8
     77e:	19 1d       	adc	r17, r9
				 /*int grandTotal = totalChildCost + totalAdultCost;*/

			

				 // Update the cumulative grand total
				 cumulativeGrandTotal += grandTotal;
     780:	c2 53       	subi	r28, 0x32	; 50
     782:	df 4f       	sbci	r29, 0xFF	; 255
     784:	88 81       	ld	r24, Y
     786:	99 81       	ldd	r25, Y+1	; 0x01
     788:	ce 5c       	subi	r28, 0xCE	; 206
     78a:	d0 40       	sbci	r29, 0x00	; 0
     78c:	80 0f       	add	r24, r16
     78e:	91 1f       	adc	r25, r17
     790:	c2 53       	subi	r28, 0x32	; 50
     792:	df 4f       	sbci	r29, 0xFF	; 255
     794:	99 83       	std	Y+1, r25	; 0x01
     796:	88 83       	st	Y, r24

				 // Display the cumulative grand total
				 sendString("Cumulative Grand Total Cost: $");
     798:	ce 5c       	subi	r28, 0xCE	; 206
     79a:	d0 40       	sbci	r29, 0x00	; 0
     79c:	88 e0       	ldi	r24, 0x08	; 8
     79e:	96 e0       	ldi	r25, 0x06	; 6
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     7a0:	d1 dc       	rcall	.-1630   	; 0x144 <sendString>
     7a2:	4a e0       	ldi	r20, 0x0A	; 10
     7a4:	be 01       	movw	r22, r28
     7a6:	68 55       	subi	r22, 0x58	; 88
     7a8:	7f 4f       	sbci	r23, 0xFF	; 255
     7aa:	c2 53       	subi	r28, 0x32	; 50
     7ac:	df 4f       	sbci	r29, 0xFF	; 255
     7ae:	88 81       	ld	r24, Y
     7b0:	99 81       	ldd	r25, Y+1	; 0x01
     7b2:	ce 5c       	subi	r28, 0xCE	; 206
     7b4:	d0 40       	sbci	r29, 0x00	; 0
				 char cumulativeGrandTotalStr[10];
				 itoa(cumulativeGrandTotal, cumulativeGrandTotalStr, 10);
				 sendString(cumulativeGrandTotalStr);
     7b6:	52 d5       	rcall	.+2724   	; 0x125c <__itoa_ncheck>
     7b8:	ce 01       	movw	r24, r28
     7ba:	88 55       	subi	r24, 0x58	; 88
     7bc:	9f 4f       	sbci	r25, 0xFF	; 255
				 sendString("\r\n");
     7be:	c2 dc       	rcall	.-1660   	; 0x144 <sendString>
     7c0:	86 e5       	ldi	r24, 0x56	; 86
     7c2:	97 e0       	ldi	r25, 0x07	; 7
				
				

				// Sum of adults and children
				totalVisitors += adults + children;
     7c4:	bf dc       	rcall	.-1666   	; 0x144 <sendString>
     7c6:	c0 53       	subi	r28, 0x30	; 48
     7c8:	df 4f       	sbci	r29, 0xFF	; 255
     7ca:	88 81       	ld	r24, Y
     7cc:	99 81       	ldd	r25, Y+1	; 0x01
     7ce:	c0 5d       	subi	r28, 0xD0	; 208
     7d0:	d0 40       	sbci	r29, 0x00	; 0
     7d2:	ce 52       	subi	r28, 0x2E	; 46
     7d4:	df 4f       	sbci	r29, 0xFF	; 255
     7d6:	e8 81       	ld	r30, Y
     7d8:	f9 81       	ldd	r31, Y+1	; 0x01
     7da:	c2 5d       	subi	r28, 0xD2	; 210
     7dc:	d0 40       	sbci	r29, 0x00	; 0
				carCounter++; // Increment the car counter
     7de:	8e 0f       	add	r24, r30
     7e0:	9f 1f       	adc	r25, r31
     7e2:	48 0e       	add	r4, r24
				

				// Display the registration details on the LCD and console
				sendString("Number Plate: ");
     7e4:	59 1e       	adc	r5, r25
     7e6:	57 01       	movw	r10, r14
     7e8:	ff ef       	ldi	r31, 0xFF	; 255
     7ea:	af 1a       	sub	r10, r31
				sendString(numberPlate);
     7ec:	bf 0a       	sbc	r11, r31
     7ee:	87 e2       	ldi	r24, 0x27	; 39
     7f0:	96 e0       	ldi	r25, 0x06	; 6
     7f2:	a8 dc       	rcall	.-1712   	; 0x144 <sendString>
				sendString("\r\n");
     7f4:	ce 01       	movw	r24, r28
     7f6:	8e 54       	subi	r24, 0x4E	; 78
     7f8:	9f 4f       	sbci	r25, 0xFF	; 255

				sendString("Adults: ");
     7fa:	a4 dc       	rcall	.-1720   	; 0x144 <sendString>
     7fc:	86 e5       	ldi	r24, 0x56	; 86
     7fe:	97 e0       	ldi	r25, 0x07	; 7
				sendString(adultsInput);
     800:	a1 dc       	rcall	.-1726   	; 0x144 <sendString>
     802:	8b ea       	ldi	r24, 0xAB	; 171
     804:	96 e0       	ldi	r25, 0x06	; 6
     806:	9e dc       	rcall	.-1732   	; 0x144 <sendString>
				sendString("\r\n");
     808:	ce 01       	movw	r24, r28
     80a:	88 53       	subi	r24, 0x38	; 56
     80c:	9f 4f       	sbci	r25, 0xFF	; 255

				sendString("Children: ");
     80e:	9a dc       	rcall	.-1740   	; 0x144 <sendString>
     810:	86 e5       	ldi	r24, 0x56	; 86
     812:	97 e0       	ldi	r25, 0x07	; 7
				sendString(childrenInput);
     814:	97 dc       	rcall	.-1746   	; 0x144 <sendString>
     816:	8a eb       	ldi	r24, 0xBA	; 186
     818:	96 e0       	ldi	r25, 0x06	; 6
     81a:	94 dc       	rcall	.-1752   	; 0x144 <sendString>
				sendString("\r\n");
     81c:	ce 01       	movw	r24, r28
     81e:	8c 53       	subi	r24, 0x3C	; 60
     820:	9f 4f       	sbci	r25, 0xFF	; 255

				sendString("Total Visitors: ");
     822:	90 dc       	rcall	.-1760   	; 0x144 <sendString>
     824:	86 e5       	ldi	r24, 0x56	; 86
     826:	97 e0       	ldi	r25, 0x07	; 7
     828:	8d dc       	rcall	.-1766   	; 0x144 <sendString>
     82a:	86 e3       	ldi	r24, 0x36	; 54
     82c:	96 e0       	ldi	r25, 0x06	; 6
     82e:	8a dc       	rcall	.-1772   	; 0x144 <sendString>
     830:	4a e0       	ldi	r20, 0x0A	; 10
				char totalVisitorsStr[10];
				itoa(totalVisitors, totalVisitorsStr, 10);
				sendString(totalVisitorsStr);
     832:	be 01       	movw	r22, r28
     834:	62 56       	subi	r22, 0x62	; 98
     836:	7f 4f       	sbci	r23, 0xFF	; 255
     838:	c2 01       	movw	r24, r4
				sendString("\r\n");
     83a:	10 d5       	rcall	.+2592   	; 0x125c <__itoa_ncheck>
     83c:	ce 01       	movw	r24, r28
     83e:	82 56       	subi	r24, 0x62	; 98

				// Display the total cost for adults and children
				sendString("Total Child Cost: $");
     840:	9f 4f       	sbci	r25, 0xFF	; 255
     842:	80 dc       	rcall	.-1792   	; 0x144 <sendString>
     844:	86 e5       	ldi	r24, 0x56	; 86
     846:	97 e0       	ldi	r25, 0x07	; 7
     848:	7d dc       	rcall	.-1798   	; 0x144 <sendString>
     84a:	87 e4       	ldi	r24, 0x47	; 71
     84c:	96 e0       	ldi	r25, 0x06	; 6
     84e:	7a dc       	rcall	.-1804   	; 0x144 <sendString>
     850:	4a e0       	ldi	r20, 0x0A	; 10
     852:	be 01       	movw	r22, r28
				char totalChildCostStr[10];
				itoa(totalChildCost, totalChildCostStr, 10);
				sendString(totalChildCostStr);
     854:	6c 56       	subi	r22, 0x6C	; 108
     856:	7f 4f       	sbci	r23, 0xFF	; 255
     858:	c1 01       	movw	r24, r2
     85a:	00 d5       	rcall	.+2560   	; 0x125c <__itoa_ncheck>
				sendString("\r\n");
     85c:	ce 01       	movw	r24, r28
     85e:	8c 56       	subi	r24, 0x6C	; 108
     860:	9f 4f       	sbci	r25, 0xFF	; 255
     862:	70 dc       	rcall	.-1824   	; 0x144 <sendString>

				sendString("Total Adult Cost: $");
     864:	86 e5       	ldi	r24, 0x56	; 86
     866:	97 e0       	ldi	r25, 0x07	; 7
     868:	6d dc       	rcall	.-1830   	; 0x144 <sendString>
     86a:	8b e5       	ldi	r24, 0x5B	; 91
     86c:	96 e0       	ldi	r25, 0x06	; 6
     86e:	6a dc       	rcall	.-1836   	; 0x144 <sendString>
     870:	4a e0       	ldi	r20, 0x0A	; 10
     872:	be 01       	movw	r22, r28
     874:	66 57       	subi	r22, 0x76	; 118
				char totalAdultCostStr[10];
				itoa(totalAdultCost, totalAdultCostStr, 10);
				sendString(totalAdultCostStr);
     876:	7f 4f       	sbci	r23, 0xFF	; 255
     878:	c4 01       	movw	r24, r8
     87a:	f0 d4       	rcall	.+2528   	; 0x125c <__itoa_ncheck>
     87c:	ce 01       	movw	r24, r28
     87e:	86 57       	subi	r24, 0x76	; 118
				sendString("\r\n");
     880:	9f 4f       	sbci	r25, 0xFF	; 255
     882:	60 dc       	rcall	.-1856   	; 0x144 <sendString>
     884:	86 e5       	ldi	r24, 0x56	; 86
     886:	97 e0       	ldi	r25, 0x07	; 7

				// Display the grand total cost
				sendString("Grand Total Cost: $");
     888:	5d dc       	rcall	.-1862   	; 0x144 <sendString>
     88a:	83 e1       	ldi	r24, 0x13	; 19
     88c:	96 e0       	ldi	r25, 0x06	; 6
     88e:	5a dc       	rcall	.-1868   	; 0x144 <sendString>
     890:	4a e0       	ldi	r20, 0x0A	; 10
     892:	be 01       	movw	r22, r28
     894:	60 58       	subi	r22, 0x80	; 128
     896:	7f 4f       	sbci	r23, 0xFF	; 255
     898:	c8 01       	movw	r24, r16
     89a:	e0 d4       	rcall	.+2496   	; 0x125c <__itoa_ncheck>
     89c:	ce 01       	movw	r24, r28
				char grandTotalStr[10];
				itoa(grandTotal, grandTotalStr, 10);
				sendString(grandTotalStr);
     89e:	80 58       	subi	r24, 0x80	; 128
     8a0:	9f 4f       	sbci	r25, 0xFF	; 255
     8a2:	50 dc       	rcall	.-1888   	; 0x144 <sendString>
     8a4:	86 e5       	ldi	r24, 0x56	; 86
     8a6:	97 e0       	ldi	r25, 0x07	; 7
				sendString("\r\n");
     8a8:	4d dc       	rcall	.-1894   	; 0x144 <sendString>
     8aa:	4a e0       	ldi	r20, 0x0A	; 10
     8ac:	be 01       	movw	r22, r28
     8ae:	60 54       	subi	r22, 0x40	; 64
     8b0:	7f 4f       	sbci	r23, 0xFF	; 255
     8b2:	c0 53       	subi	r28, 0x30	; 48
     8b4:	df 4f       	sbci	r29, 0xFF	; 255
     8b6:	88 81       	ld	r24, Y
     8b8:	99 81       	ldd	r25, Y+1	; 0x01
     8ba:	c0 5d       	subi	r28, 0xD0	; 208
     8bc:	d0 40       	sbci	r29, 0x00	; 0
     8be:	ce d4       	rcall	.+2460   	; 0x125c <__itoa_ncheck>
     8c0:	4a e0       	ldi	r20, 0x0A	; 10
     8c2:	be 01       	movw	r22, r28
     8c4:	64 54       	subi	r22, 0x44	; 68
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	ce 52       	subi	r28, 0x2E	; 46
     8ca:	df 4f       	sbci	r29, 0xFF	; 255
     8cc:	88 81       	ld	r24, Y
     8ce:	99 81       	ldd	r25, Y+1	; 0x01
     8d0:	c2 5d       	subi	r28, 0xD2	; 210
     8d2:	d0 40       	sbci	r29, 0x00	; 0
     8d4:	c3 d4       	rcall	.+2438   	; 0x125c <__itoa_ncheck>
     8d6:	4a e0       	ldi	r20, 0x0A	; 10
     8d8:	be 01       	movw	r22, r28
     8da:	62 56       	subi	r22, 0x62	; 98
     8dc:	7f 4f       	sbci	r23, 0xFF	; 255
     8de:	c2 01       	movw	r24, r4
     8e0:	bd d4       	rcall	.+2426   	; 0x125c <__itoa_ncheck>
     8e2:	44 e0       	ldi	r20, 0x04	; 4
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	60 e4       	ldi	r22, 0x40	; 64
     8e8:	70 e0       	ldi	r23, 0x00	; 0
			 itoa(children, childrenInputStr, 10);
			 
			 itoa(totalVisitors, totalVisitorsStr, 10);

			 // Store data in EEPROM as strings
			 eeprom_update_block(adultsInputStr, (void *)EEPROM_ADDRESS_Adults , 4);
     8ea:	ce 01       	movw	r24, r28
     8ec:	80 54       	subi	r24, 0x40	; 64
     8ee:	9f 4f       	sbci	r25, 0xFF	; 255
     8f0:	0e 94 95 0c 	call	0x192a	; 0x192a <eeprom_update_block>
     8f4:	b7 01       	movw	r22, r14
     8f6:	6d 5e       	subi	r22, 0xED	; 237
			 eeprom_update_block(childrenInputStr, (void *)(EEPROM_ADDRESS_children + carCounter * 4), 4);
     8f8:	7f 4f       	sbci	r23, 0xFF	; 255
     8fa:	66 0f       	add	r22, r22
     8fc:	77 1f       	adc	r23, r23
     8fe:	66 0f       	add	r22, r22
     900:	77 1f       	adc	r23, r23
     902:	44 e0       	ldi	r20, 0x04	; 4
     904:	50 e0       	ldi	r21, 0x00	; 0
     906:	ce 01       	movw	r24, r28
     908:	84 54       	subi	r24, 0x44	; 68
     90a:	9f 4f       	sbci	r25, 0xFF	; 255
     90c:	0e 94 95 0c 	call	0x192a	; 0x192a <eeprom_update_block>
			 eeprom_update_block(totalVisitorsStr, (void *)(EEPROM_ADDRESS_total + carCounter * 10), 10);
     910:	b5 01       	movw	r22, r10
     912:	66 0f       	add	r22, r22
     914:	77 1f       	adc	r23, r23
     916:	aa 0c       	add	r10, r10
     918:	bb 1c       	adc	r11, r11
     91a:	aa 0c       	add	r10, r10
     91c:	bb 1c       	adc	r11, r11
     91e:	aa 0c       	add	r10, r10
     920:	bb 1c       	adc	r11, r11
     922:	6a 0d       	add	r22, r10
     924:	7b 1d       	adc	r23, r11
     926:	60 59       	subi	r22, 0x90	; 144
     928:	7f 4f       	sbci	r23, 0xFF	; 255
     92a:	4a e0       	ldi	r20, 0x0A	; 10
     92c:	50 e0       	ldi	r21, 0x00	; 0
     92e:	ce 01       	movw	r24, r28
     930:	82 56       	subi	r24, 0x62	; 98
			 carCounter++;
     932:	9f 4f       	sbci	r25, 0xFF	; 255
     934:	fa d7       	rcall	.+4084   	; 0x192a <eeprom_update_block>
				break;
     936:	22 e0       	ldi	r18, 0x02	; 2
     938:	e2 0e       	add	r14, r18
     93a:	f1 1c       	adc	r15, r1
     93c:	0f b6       	in	r0, 0x3f	; 63
     93e:	f8 94       	cli


				case '3':
				// Display the total number of tourists categorized by age group
				sendString("Total number of tourists, categorized by age group:\r\n");
     940:	de bf       	out	0x3e, r29	; 62
     942:	0f be       	out	0x3f, r0	; 63
     944:	cd bf       	out	0x3d, r28	; 61

				// Read the total number of adults from EEPROM
				char adultsFromEEPROMStr[4];
				eeprom_read_block(adultsFromEEPROMStr, (void *)EEPROM_ADDRESS_Adults, 4);
     946:	ca cd       	rjmp	.-1132   	; 0x4dc <displayMenu+0x4e>
     948:	8f e6       	ldi	r24, 0x6F	; 111
     94a:	96 e0       	ldi	r25, 0x06	; 6
     94c:	fb db       	rcall	.-2058   	; 0x144 <sendString>
     94e:	44 e0       	ldi	r20, 0x04	; 4
     950:	50 e0       	ldi	r21, 0x00	; 0
     952:	60 e4       	ldi	r22, 0x40	; 64
				int adultsFromEEPROM = atoi(adultsFromEEPROMStr);
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	ce 01       	movw	r24, r28
     958:	8c 56       	subi	r24, 0x6C	; 108
     95a:	9f 4f       	sbci	r25, 0xFF	; 255

				// Read the total number of children from EEPROM
				char childrenFromEEPROMStr[4];
				eeprom_read_block(childrenFromEEPROMStr, (void *)(EEPROM_ADDRESS_Adults), 4);
     95c:	d1 d7       	rcall	.+4002   	; 0x1900 <eeprom_read_block>
     95e:	ce 01       	movw	r24, r28
     960:	8c 56       	subi	r24, 0x6C	; 108
     962:	9f 4f       	sbci	r25, 0xFF	; 255
     964:	3f d4       	rcall	.+2174   	; 0x11e4 <atoi>
     966:	4c 01       	movw	r8, r24
     968:	44 e0       	ldi	r20, 0x04	; 4
				int childrenFromEEPROM = atoi(childrenFromEEPROMStr);
     96a:	50 e0       	ldi	r21, 0x00	; 0
     96c:	60 e4       	ldi	r22, 0x40	; 64
     96e:	70 e0       	ldi	r23, 0x00	; 0
     970:	ce 01       	movw	r24, r28
     972:	86 57       	subi	r24, 0x76	; 118
     974:	9f 4f       	sbci	r25, 0xFF	; 255

				// Calculate the combined total
				int totalTourists = adultsFromEEPROM + childrenFromEEPROM;
     976:	c4 d7       	rcall	.+3976   	; 0x1900 <eeprom_read_block>
     978:	ce 01       	movw	r24, r28
     97a:	86 57       	subi	r24, 0x76	; 118

				sendString("Total Adults: ");
     97c:	9f 4f       	sbci	r25, 0xFF	; 255
     97e:	32 d4       	rcall	.+2148   	; 0x11e4 <atoi>
     980:	8c 01       	movw	r16, r24
     982:	54 01       	movw	r10, r8
     984:	a8 0e       	add	r10, r24
     986:	b9 1e       	adc	r11, r25
     988:	85 ea       	ldi	r24, 0xA5	; 165
     98a:	96 e0       	ldi	r25, 0x06	; 6
     98c:	db db       	rcall	.-2122   	; 0x144 <sendString>
     98e:	4a e0       	ldi	r20, 0x0A	; 10
     990:	be 01       	movw	r22, r28
				char adultsStr[10];
				itoa(adultsFromEEPROM, adultsStr, 10);
				sendString(adultsStr);
     992:	60 58       	subi	r22, 0x80	; 128
     994:	7f 4f       	sbci	r23, 0xFF	; 255
     996:	c4 01       	movw	r24, r8
     998:	61 d4       	rcall	.+2242   	; 0x125c <__itoa_ncheck>
     99a:	ce 01       	movw	r24, r28
				sendString("\r\n");
     99c:	80 58       	subi	r24, 0x80	; 128
     99e:	9f 4f       	sbci	r25, 0xFF	; 255
     9a0:	d1 db       	rcall	.-2142   	; 0x144 <sendString>
     9a2:	86 e5       	ldi	r24, 0x56	; 86

				sendString("Total Children: ");
     9a4:	97 e0       	ldi	r25, 0x07	; 7
     9a6:	ce db       	rcall	.-2148   	; 0x144 <sendString>
     9a8:	84 eb       	ldi	r24, 0xB4	; 180
     9aa:	96 e0       	ldi	r25, 0x06	; 6
     9ac:	cb db       	rcall	.-2154   	; 0x144 <sendString>
     9ae:	4a e0       	ldi	r20, 0x0A	; 10
     9b0:	be 01       	movw	r22, r28
     9b2:	6c 58       	subi	r22, 0x8C	; 140
     9b4:	7f 4f       	sbci	r23, 0xFF	; 255
				char childrenStr[10];
				itoa(childrenFromEEPROM, childrenStr, 10);
				sendString(childrenStr);
     9b6:	c8 01       	movw	r24, r16
     9b8:	51 d4       	rcall	.+2210   	; 0x125c <__itoa_ncheck>
     9ba:	ce 01       	movw	r24, r28
     9bc:	8c 58       	subi	r24, 0x8C	; 140
     9be:	9f 4f       	sbci	r25, 0xFF	; 255
				sendString("\r\n");
     9c0:	c1 db       	rcall	.-2174   	; 0x144 <sendString>
     9c2:	86 e5       	ldi	r24, 0x56	; 86
     9c4:	97 e0       	ldi	r25, 0x07	; 7

				sendString("Combined Total: ");
     9c6:	be db       	rcall	.-2180   	; 0x144 <sendString>
     9c8:	85 ec       	ldi	r24, 0xC5	; 197
     9ca:	96 e0       	ldi	r25, 0x06	; 6
     9cc:	bb db       	rcall	.-2186   	; 0x144 <sendString>
     9ce:	4a e0       	ldi	r20, 0x0A	; 10
     9d0:	be 01       	movw	r22, r28
     9d2:	60 5f       	subi	r22, 0xF0	; 240
     9d4:	7f 4f       	sbci	r23, 0xFF	; 255
     9d6:	c5 01       	movw	r24, r10
     9d8:	41 d4       	rcall	.+2178   	; 0x125c <__itoa_ncheck>
				char totalStr[10];
				itoa(totalTourists, totalStr, 10);
				sendString(totalStr);
     9da:	ce 01       	movw	r24, r28
     9dc:	40 96       	adiw	r24, 0x10	; 16
     9de:	b2 db       	rcall	.-2204   	; 0x144 <sendString>
     9e0:	86 e5       	ldi	r24, 0x56	; 86
				sendString("\r\n");
     9e2:	97 e0       	ldi	r25, 0x07	; 7
     9e4:	af db       	rcall	.-2210   	; 0x144 <sendString>
     9e6:	7a cd       	rjmp	.-1292   	; 0x4dc <displayMenu+0x4e>
     9e8:	86 ed       	ldi	r24, 0xD6	; 214

				break;
     9ea:	96 e0       	ldi	r25, 0x06	; 6



				case '4':
				// Display the vehicles still in the park
				sendString("Vehicles still in the park:\r\n");
     9ec:	ab db       	rcall	.-2218   	; 0x144 <sendString>
     9ee:	00 e0       	ldi	r16, 0x00	; 0
     9f0:	10 e0       	ldi	r17, 0x00	; 0
     9f2:	26 c0       	rjmp	.+76     	; 0xa40 <displayMenu+0x5b2>

				for (int i = 0; i < carCounter; i++) {
     9f4:	c8 01       	movw	r24, r16
					char vehicleDetails[100];
					snprintf(vehicleDetails, sizeof(vehicleDetails), "Vehicle %d: %s\r\n", i + 1, numberPlates[i]);
     9f6:	88 0f       	add	r24, r24
     9f8:	99 1f       	adc	r25, r25
     9fa:	80 0f       	add	r24, r16
     9fc:	91 1f       	adc	r25, r17
     9fe:	e1 e0       	ldi	r30, 0x01	; 1
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	ec 0f       	add	r30, r28
     a04:	fd 1f       	adc	r31, r29
     a06:	8e 0f       	add	r24, r30
     a08:	9f 1f       	adc	r25, r31
     a0a:	0f 5f       	subi	r16, 0xFF	; 255
     a0c:	1f 4f       	sbci	r17, 0xFF	; 255
     a0e:	9f 93       	push	r25
     a10:	8f 93       	push	r24
     a12:	1f 93       	push	r17
     a14:	0f 93       	push	r16
     a16:	84 ef       	ldi	r24, 0xF4	; 244
     a18:	96 e0       	ldi	r25, 0x06	; 6
     a1a:	9f 93       	push	r25
     a1c:	8f 93       	push	r24
     a1e:	1f 92       	push	r1
     a20:	84 e6       	ldi	r24, 0x64	; 100
     a22:	8f 93       	push	r24
     a24:	5e 01       	movw	r10, r28
     a26:	f0 e1       	ldi	r31, 0x10	; 16
     a28:	af 0e       	add	r10, r31
     a2a:	b1 1c       	adc	r11, r1
     a2c:	bf 92       	push	r11
					sendString(vehicleDetails);
     a2e:	af 92       	push	r10
     a30:	40 d4       	rcall	.+2176   	; 0x12b2 <snprintf>
     a32:	c5 01       	movw	r24, r10
     a34:	87 db       	rcall	.-2290   	; 0x144 <sendString>
     a36:	0f b6       	in	r0, 0x3f	; 63
     a38:	f8 94       	cli
     a3a:	de bf       	out	0x3e, r29	; 62

				case '4':
				// Display the vehicles still in the park
				sendString("Vehicles still in the park:\r\n");

				for (int i = 0; i < carCounter; i++) {
     a3c:	0f be       	out	0x3f, r0	; 63
     a3e:	cd bf       	out	0x3d, r28	; 61
     a40:	0e 15       	cp	r16, r14
     a42:	1f 05       	cpc	r17, r15
					sendString(vehicleDetails);
				}
				break;
				
				case '5':
				if (loggedIn) {
     a44:	bc f2       	brlt	.-82     	; 0x9f4 <displayMenu+0x566>
     a46:	4a cd       	rjmp	.-1388   	; 0x4dc <displayMenu+0x4e>
					// Attendant wants to input the number of bottles in the fridge
					sendString("Enter the number of bottles in the fridge: ");
     a48:	c1 14       	cp	r12, r1
     a4a:	d1 04       	cpc	r13, r1
     a4c:	31 f1       	breq	.+76     	; 0xa9a <displayMenu+0x60c>
     a4e:	85 e0       	ldi	r24, 0x05	; 5
					char fridgeInput[4];
					int fridgeBottleCount = 0;

					// Receive and process the number of bottles
					int i = 0;
     a50:	97 e0       	ldi	r25, 0x07	; 7
     a52:	78 db       	rcall	.-2320   	; 0x144 <sendString>
					while (1) {
						char c = UART_Receive();
     a54:	00 e0       	ldi	r16, 0x00	; 0
     a56:	10 e0       	ldi	r17, 0x00	; 0
						if (c == '\r' || c == '\n') {
     a58:	d8 db       	rcall	.-2128   	; 0x20a <UART_Receive>
     a5a:	8d 30       	cpi	r24, 0x0D	; 13
     a5c:	61 f0       	breq	.+24     	; 0xa76 <displayMenu+0x5e8>
     a5e:	8a 30       	cpi	r24, 0x0A	; 10
							break;
						}
						fridgeInput[i] = c;
     a60:	51 f0       	breq	.+20     	; 0xa76 <displayMenu+0x5e8>
     a62:	e0 e1       	ldi	r30, 0x10	; 16
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	ec 0f       	add	r30, r28
     a68:	fd 1f       	adc	r31, r29
						i++;
     a6a:	e0 0f       	add	r30, r16
     a6c:	f1 1f       	adc	r31, r17
					}
     a6e:	80 83       	st	Z, r24
					fridgeInput[i] = '\0';
     a70:	0f 5f       	subi	r16, 0xFF	; 255
     a72:	1f 4f       	sbci	r17, 0xFF	; 255
     a74:	f1 cf       	rjmp	.-30     	; 0xa58 <displayMenu+0x5ca>
     a76:	e0 e1       	ldi	r30, 0x10	; 16
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	ec 0f       	add	r30, r28
     a7c:	fd 1f       	adc	r31, r29
					fridgeBottleCount = atoi(fridgeInput);
     a7e:	e0 0f       	add	r30, r16
     a80:	f1 1f       	adc	r31, r17
     a82:	10 82       	st	Z, r1
     a84:	ce 01       	movw	r24, r28

					// Store the number of bottles in EEPROM
					eeprom_update_word((uint16_t *)FRIDGE_BOTTLE_COUNT_ADDR, fridgeBottleCount);
     a86:	40 96       	adiw	r24, 0x10	; 16
     a88:	ad d3       	rcall	.+1882   	; 0x11e4 <atoi>
     a8a:	bc 01       	movw	r22, r24
     a8c:	84 e8       	ldi	r24, 0x84	; 132
     a8e:	90 e0       	ldi	r25, 0x00	; 0


					sendString("Fridge bottle count stored in EEPROM.\r\n");
     a90:	6d d7       	rcall	.+3802   	; 0x196c <eeprom_update_word>
     a92:	81 e3       	ldi	r24, 0x31	; 49
     a94:	97 e0       	ldi	r25, 0x07	; 7
     a96:	56 db       	rcall	.-2388   	; 0x144 <sendString>
     a98:	21 cd       	rjmp	.-1470   	; 0x4dc <displayMenu+0x4e>
					} else {
					sendString("Please log in to access this option.\r\n");
     a9a:	89 e5       	ldi	r24, 0x59	; 89
     a9c:	97 e0       	ldi	r25, 0x07	; 7
     a9e:	52 db       	rcall	.-2396   	; 0x144 <sendString>
     aa0:	1d cd       	rjmp	.-1478   	; 0x4dc <displayMenu+0x4e>
     aa2:	cd 28       	or	r12, r13
				}
				break;
				case '6':
				
				if (loggedIn) {
     aa4:	c1 f0       	breq	.+48     	; 0xad6 <displayMenu+0x648>
     aa6:	84 e8       	ldi	r24, 0x84	; 132
					
					// Attendant wants to check the number of bottles in the fridge
					uint16_t currentBottleCount = eeprom_read_word((uint16_t *)FRIDGE_BOTTLE_COUNT_ADDR);
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	3a d7       	rcall	.+3700   	; 0x1920 <eeprom_read_word>
     aac:	9f 93       	push	r25
					char response[50]; // Define a buffer for the response
					sprintf(response, "Current Bottle Count:  %u\n", currentBottleCount);
     aae:	8f 93       	push	r24
     ab0:	80 e8       	ldi	r24, 0x80	; 128
     ab2:	97 e0       	ldi	r25, 0x07	; 7
     ab4:	9f 93       	push	r25
     ab6:	8f 93       	push	r24
     ab8:	8e 01       	movw	r16, r28
     aba:	00 5f       	subi	r16, 0xF0	; 240
     abc:	1f 4f       	sbci	r17, 0xFF	; 255
     abe:	1f 93       	push	r17
     ac0:	0f 93       	push	r16
     ac2:	33 d4       	rcall	.+2150   	; 0x132a <sprintf>
     ac4:	c8 01       	movw	r24, r16
					sendString(response); // Send the response string
     ac6:	3e db       	rcall	.-2436   	; 0x144 <sendString>
     ac8:	0f 90       	pop	r0
     aca:	0f 90       	pop	r0
     acc:	0f 90       	pop	r0
     ace:	0f 90       	pop	r0
     ad0:	0f 90       	pop	r0
     ad2:	0f 90       	pop	r0
     ad4:	03 c0       	rjmp	.+6      	; 0xadc <displayMenu+0x64e>
     ad6:	89 e5       	ldi	r24, 0x59	; 89
					} else {
					sendString("Please log in to access this option.\r\n");
     ad8:	97 e0       	ldi	r25, 0x07	; 7
     ada:	34 db       	rcall	.-2456   	; 0x144 <sendString>
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	90 e0       	ldi	r25, 0x00	; 0
				}
				  shouldExecuteAfterOption6 = 1; // Set the flag to execute code after option 6
     ae0:	90 93 af 08 	sts	0x08AF, r25	; 0x8008af <shouldExecuteAfterOption6+0x1>
     ae4:	80 93 ae 08 	sts	0x08AE, r24	; 0x8008ae <shouldExecuteAfterOption6>
     ae8:	a0 dc       	rcall	.-1728   	; 0x42a <stopContin>
				  stopContin();
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	f8 94       	cli
     aee:	de bf       	out	0x3e, r29	; 62
     af0:	0f be       	out	0x3f, r0	; 63
     af2:	cd bf       	out	0x3d, r28	; 61
     af4:	ca c0       	rjmp	.+404    	; 0xc8a <displayMenu+0x7fc>
     af6:	c1 14       	cp	r12, r1
				  return 0;
					  
				
				case '7':
				if (loggedIn) {
     af8:	d1 04       	cpc	r13, r1
     afa:	09 f4       	brne	.+2      	; 0xafe <displayMenu+0x670>
     afc:	bc c0       	rjmp	.+376    	; 0xc76 <displayMenu+0x7e8>
					// Attendant wants to remove a car from the park
					sendString("Enter the number plate to remove: ");
     afe:	8b e9       	ldi	r24, 0x9B	; 155
     b00:	97 e0       	ldi	r25, 0x07	; 7
     b02:	20 db       	rcall	.-2496   	; 0x144 <sendString>
     b04:	00 e0       	ldi	r16, 0x00	; 0
					char plateToRemove[10];
					int plateLengthToRemove = 8;

					// Receive and process the number plate to remove
					int i = 0;
     b06:	10 e0       	ldi	r17, 0x00	; 0
     b08:	80 db       	rcall	.-2304   	; 0x20a <UART_Receive>
					while (1) {
						char c = UART_Receive();
     b0a:	8d 30       	cpi	r24, 0x0D	; 13
     b0c:	61 f0       	breq	.+24     	; 0xb26 <displayMenu+0x698>
						if (c == '\r' || c == '\n') {
     b0e:	8a 30       	cpi	r24, 0x0A	; 10
     b10:	51 f0       	breq	.+20     	; 0xb26 <displayMenu+0x698>
     b12:	e0 e1       	ldi	r30, 0x10	; 16
     b14:	f0 e0       	ldi	r31, 0x00	; 0
							break;
						}
						plateToRemove[i] = c;
     b16:	ec 0f       	add	r30, r28
     b18:	fd 1f       	adc	r31, r29
     b1a:	e0 0f       	add	r30, r16
     b1c:	f1 1f       	adc	r31, r17
     b1e:	80 83       	st	Z, r24
     b20:	0f 5f       	subi	r16, 0xFF	; 255
     b22:	1f 4f       	sbci	r17, 0xFF	; 255
						i++;
     b24:	f1 cf       	rjmp	.-30     	; 0xb08 <displayMenu+0x67a>
     b26:	e0 e1       	ldi	r30, 0x10	; 16
					}
     b28:	f0 e0       	ldi	r31, 0x00	; 0
					plateToRemove[i] = '\0';
     b2a:	ec 0f       	add	r30, r28
     b2c:	fd 1f       	adc	r31, r29
     b2e:	e0 0f       	add	r30, r16
     b30:	f1 1f       	adc	r31, r17
     b32:	10 82       	st	Z, r1
     b34:	00 e0       	ldi	r16, 0x00	; 0
					plateLengthToRemove = i;

					int plateIndexToRemove = -1;
					// Find the index of the car with the specified number plate
					for (int j = 0; j < carCounter; j++) {
     b36:	10 e0       	ldi	r17, 0x00	; 0
     b38:	1f c0       	rjmp	.+62     	; 0xb78 <displayMenu+0x6ea>
     b3a:	b8 01       	movw	r22, r16
						if (strcmp(plateToRemove, numberPlates[j]) == 0) {
     b3c:	66 0f       	add	r22, r22
     b3e:	77 1f       	adc	r23, r23
     b40:	60 0f       	add	r22, r16
     b42:	71 1f       	adc	r23, r17
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	8c 0f       	add	r24, r28
     b4a:	9d 1f       	adc	r25, r29
     b4c:	68 0f       	add	r22, r24
     b4e:	79 1f       	adc	r23, r25
     b50:	ce 01       	movw	r24, r28
     b52:	40 96       	adiw	r24, 0x10	; 16
     b54:	64 d3       	rcall	.+1736   	; 0x121e <strcmp>
     b56:	89 2b       	or	r24, r25
     b58:	69 f4       	brne	.+26     	; 0xb74 <displayMenu+0x6e6>
							plateIndexToRemove = j;
							

							gateOpen();
     b5a:	15 dc       	rcall	.-2006   	; 0x386 <gateOpen>
     b5c:	9a e2       	ldi	r25, 0x2A	; 42
     b5e:	e0 e5       	ldi	r30, 0x50	; 80
     b60:	fe ef       	ldi	r31, 0xFE	; 254
     b62:	20 e0       	ldi	r18, 0x00	; 0
     b64:	91 50       	subi	r25, 0x01	; 1
     b66:	e0 40       	sbci	r30, 0x00	; 0
     b68:	f0 40       	sbci	r31, 0x00	; 0
     b6a:	20 40       	sbci	r18, 0x00	; 0
     b6c:	d9 f7       	brne	.-10     	; 0xb64 <displayMenu+0x6d6>
							_delay_ms(100000);
							gateclose();
     b6e:	00 00       	nop
     b70:	2b dc       	rcall	.-1962   	; 0x3c8 <gateclose>
							break;
     b72:	07 c0       	rjmp	.+14     	; 0xb82 <displayMenu+0x6f4>
					plateToRemove[i] = '\0';
					plateLengthToRemove = i;

					int plateIndexToRemove = -1;
					// Find the index of the car with the specified number plate
					for (int j = 0; j < carCounter; j++) {
     b74:	0f 5f       	subi	r16, 0xFF	; 255
     b76:	1f 4f       	sbci	r17, 0xFF	; 255
     b78:	0e 15       	cp	r16, r14
     b7a:	1f 05       	cpc	r17, r15
     b7c:	f4 f2       	brlt	.-68     	; 0xb3a <displayMenu+0x6ac>
						i++;
					}
					plateToRemove[i] = '\0';
					plateLengthToRemove = i;

					int plateIndexToRemove = -1;
     b7e:	0f ef       	ldi	r16, 0xFF	; 255
     b80:	1f ef       	ldi	r17, 0xFF	; 255
							gateclose();
							break;
						}
					}

					if (plateIndexToRemove == -1) {
     b82:	0f 3f       	cpi	r16, 0xFF	; 255
     b84:	3f ef       	ldi	r19, 0xFF	; 255
     b86:	13 07       	cpc	r17, r19
     b88:	21 f4       	brne	.+8      	; 0xb92 <displayMenu+0x704>
						sendString("Car with this number plate is not in the park.\r\n");
     b8a:	8e eb       	ldi	r24, 0xBE	; 190
     b8c:	97 e0       	ldi	r25, 0x07	; 7
     b8e:	da da       	rcall	.-2636   	; 0x144 <sendString>
     b90:	a5 cc       	rjmp	.-1718   	; 0x4dc <displayMenu+0x4e>
						} else {
						// Unregister visitors associated with this car
						int removedAdults = eeprom_read_word((uint16_t *)(EEPROM_ADDRESS_Adults + plateIndexToRemove * 2 * sizeof(int)));
     b92:	48 01       	movw	r8, r16
     b94:	88 0c       	add	r8, r8
     b96:	99 1c       	adc	r9, r9
     b98:	88 0c       	add	r8, r8
     b9a:	99 1c       	adc	r9, r9
     b9c:	c4 01       	movw	r24, r8
     b9e:	80 5c       	subi	r24, 0xC0	; 192
     ba0:	9f 4f       	sbci	r25, 0xFF	; 255
     ba2:	be d6       	rcall	.+3452   	; 0x1920 <eeprom_read_word>
     ba4:	5c 01       	movw	r10, r24
						int removedChildren = eeprom_read_word((uint16_t *)(EEPROM_ADDRESS_children + (plateIndexToRemove * 2 + 1) * sizeof(int)));
     ba6:	c4 01       	movw	r24, r8
     ba8:	86 5b       	subi	r24, 0xB6	; 182
     baa:	9f 4f       	sbci	r25, 0xFF	; 255
     bac:	b9 d6       	rcall	.+3442   	; 0x1920 <eeprom_read_word>
     bae:	8a 0d       	add	r24, r10

						// Deduct the removed visitors from the cumulative count
						totalVisitors -= (removedAdults + removedChildren);
     bb0:	9b 1d       	adc	r25, r11
     bb2:	48 1a       	sub	r4, r24
     bb4:	59 0a       	sbc	r5, r25

						// Remove the number plate from the list
						for (int k = plateIndexToRemove; k < carCounter - 1; k++) {
     bb6:	35 c0       	rjmp	.+106    	; 0xc22 <displayMenu+0x794>
							strcpy(numberPlates[k], numberPlates[k + 1]);
     bb8:	58 01       	movw	r10, r16
     bba:	8f ef       	ldi	r24, 0xFF	; 255
     bbc:	a8 1a       	sub	r10, r24
     bbe:	b8 0a       	sbc	r11, r24
     bc0:	b5 01       	movw	r22, r10
     bc2:	66 0f       	add	r22, r22
     bc4:	77 1f       	adc	r23, r23
     bc6:	6a 0d       	add	r22, r10
     bc8:	7b 1d       	adc	r23, r11
     bca:	e1 e0       	ldi	r30, 0x01	; 1
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	ec 0f       	add	r30, r28
     bd0:	fd 1f       	adc	r31, r29
     bd2:	6e 0f       	add	r22, r30
     bd4:	7f 1f       	adc	r23, r31
     bd6:	c8 01       	movw	r24, r16
     bd8:	88 0f       	add	r24, r24
     bda:	99 1f       	adc	r25, r25
     bdc:	80 0f       	add	r24, r16
     bde:	91 1f       	adc	r25, r17
     be0:	8e 0f       	add	r24, r30
							// Copy visitors data from the next car to the current car
							eeprom_update_word((uint16_t *)(EEPROM_ADDRESS_Adults + k * 2 * sizeof(int)),
							eeprom_read_word((uint16_t *)(EEPROM_ADDRESS_children + (k + 1) * 2 * sizeof(int))));
     be2:	9f 1f       	adc	r25, r31
     be4:	25 d3       	rcall	.+1610   	; 0x1230 <strcpy>
     be6:	c5 01       	movw	r24, r10
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25

						// Remove the number plate from the list
						for (int k = plateIndexToRemove; k < carCounter - 1; k++) {
							strcpy(numberPlates[k], numberPlates[k + 1]);
							// Copy visitors data from the next car to the current car
							eeprom_update_word((uint16_t *)(EEPROM_ADDRESS_Adults + k * 2 * sizeof(int)),
     bec:	88 0f       	add	r24, r24
     bee:	99 1f       	adc	r25, r25
     bf0:	88 5b       	subi	r24, 0xB8	; 184
     bf2:	9f 4f       	sbci	r25, 0xFF	; 255
     bf4:	95 d6       	rcall	.+3370   	; 0x1920 <eeprom_read_word>
     bf6:	00 0f       	add	r16, r16
     bf8:	11 1f       	adc	r17, r17
     bfa:	00 0f       	add	r16, r16
     bfc:	11 1f       	adc	r17, r17
     bfe:	48 01       	movw	r8, r16
     c00:	f0 e4       	ldi	r31, 0x40	; 64
     c02:	8f 0e       	add	r8, r31
     c04:	91 1c       	adc	r9, r1
     c06:	bc 01       	movw	r22, r24
     c08:	c4 01       	movw	r24, r8
     c0a:	b0 d6       	rcall	.+3424   	; 0x196c <eeprom_update_word>
							eeprom_read_word((uint16_t *)(EEPROM_ADDRESS_children + (k + 1) * 2 * sizeof(int))));
							eeprom_update_word((uint16_t *)(EEPROM_ADDRESS_Adults + k * 2 * sizeof(int)), 0);
     c0c:	60 e0       	ldi	r22, 0x00	; 0
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	c4 01       	movw	r24, r8
     c12:	ac d6       	rcall	.+3416   	; 0x196c <eeprom_update_word>
     c14:	60 e0       	ldi	r22, 0x00	; 0
							eeprom_update_word((uint16_t *)(EEPROM_ADDRESS_children + (k * 2 + 1) * sizeof(int)), 0);
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	c8 01       	movw	r24, r16
     c1a:	86 5b       	subi	r24, 0xB6	; 182
     c1c:	9f 4f       	sbci	r25, 0xFF	; 255
     c1e:	a6 d6       	rcall	.+3404   	; 0x196c <eeprom_update_word>
     c20:	85 01       	movw	r16, r10
     c22:	57 01       	movw	r10, r14

						// Deduct the removed visitors from the cumulative count
						totalVisitors -= (removedAdults + removedChildren);

						// Remove the number plate from the list
						for (int k = plateIndexToRemove; k < carCounter - 1; k++) {
     c24:	21 e0       	ldi	r18, 0x01	; 1
     c26:	a2 1a       	sub	r10, r18
     c28:	b1 08       	sbc	r11, r1
     c2a:	0a 15       	cp	r16, r10
     c2c:	1b 05       	cpc	r17, r11
     c2e:	0c f4       	brge	.+2      	; 0xc32 <displayMenu+0x7a4>
     c30:	c3 cf       	rjmp	.-122    	; 0xbb8 <displayMenu+0x72a>
     c32:	85 01       	movw	r16, r10
     c34:	00 0f       	add	r16, r16

							eeprom_read_word((uint16_t *)(EEPROM_ADDRESS_total + ((k + 1) * 2 + 1) * sizeof(int)));
						}

						// Clear the data of the last car
						eeprom_update_word((uint16_t *)(EEPROM_ADDRESS_Adults + (carCounter - 1) * 2 * sizeof(int)), 0);
     c36:	11 1f       	adc	r17, r17
     c38:	00 0f       	add	r16, r16
     c3a:	11 1f       	adc	r17, r17
     c3c:	60 e0       	ldi	r22, 0x00	; 0
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	c8 01       	movw	r24, r16
     c42:	80 5c       	subi	r24, 0xC0	; 192
     c44:	9f 4f       	sbci	r25, 0xFF	; 255
     c46:	92 d6       	rcall	.+3364   	; 0x196c <eeprom_update_word>
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	c8 01       	movw	r24, r16
						eeprom_update_word((uint16_t *)(EEPROM_ADDRESS_children + ((carCounter - 1) * 2 + 1) * sizeof(int)), 0);
     c4e:	86 5b       	subi	r24, 0xB6	; 182
     c50:	9f 4f       	sbci	r25, 0xFF	; 255
     c52:	8c d6       	rcall	.+3352   	; 0x196c <eeprom_update_word>
     c54:	f5 01       	movw	r30, r10
     c56:	ee 0f       	add	r30, r30
     c58:	ff 1f       	adc	r31, r31
     c5a:	ea 0d       	add	r30, r10
						strcpy(numberPlates[carCounter - 1], "");
     c5c:	fb 1d       	adc	r31, r11
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	8c 0f       	add	r24, r28
     c64:	9d 1f       	adc	r25, r29
     c66:	e8 0f       	add	r30, r24
     c68:	f9 1f       	adc	r31, r25
     c6a:	10 82       	st	Z, r1
     c6c:	8f ee       	ldi	r24, 0xEF	; 239
     c6e:	97 e0       	ldi	r25, 0x07	; 7
     c70:	69 da       	rcall	.-2862   	; 0x144 <sendString>
     c72:	75 01       	movw	r14, r10

						carCounter--;

						// Display confirmation
						sendString("Car removed from the park. Visitors unregistered.\r\n");
     c74:	33 cc       	rjmp	.-1946   	; 0x4dc <displayMenu+0x4e>
     c76:	89 e5       	ldi	r24, 0x59	; 89
     c78:	97 e0       	ldi	r25, 0x07	; 7
     c7a:	64 da       	rcall	.-2872   	; 0x144 <sendString>
						// Clear the data of the last car
						eeprom_update_word((uint16_t *)(EEPROM_ADDRESS_Adults + (carCounter - 1) * 2 * sizeof(int)), 0);
						eeprom_update_word((uint16_t *)(EEPROM_ADDRESS_children + ((carCounter - 1) * 2 + 1) * sizeof(int)), 0);
						strcpy(numberPlates[carCounter - 1], "");

						carCounter--;
     c7c:	2f cc       	rjmp	.-1954   	; 0x4dc <displayMenu+0x4e>
     c7e:	c7 db       	rcall	.-2162   	; 0x40e <displayParkFullStatus>

						// Display confirmation
						sendString("Car removed from the park. Visitors unregistered.\r\n");
					}
					} else {
					sendString("Please log in to access this option.\r\n");
     c80:	2d cc       	rjmp	.-1958   	; 0x4dc <displayMenu+0x4e>
     c82:	83 e2       	ldi	r24, 0x23	; 35
     c84:	98 e0       	ldi	r25, 0x08	; 8
     c86:	5e da       	rcall	.-2884   	; 0x144 <sendString>
     c88:	29 cc       	rjmp	.-1966   	; 0x4dc <displayMenu+0x4e>
				
				break;

				 case '8':
				 // Check if the park is full
				 displayParkFullStatus();
     c8a:	cd 52       	subi	r28, 0x2D	; 45
     c8c:	df 4f       	sbci	r29, 0xFF	; 255
				 break;
     c8e:	0f b6       	in	r0, 0x3f	; 63
				


				
				default:
				sendString("Invalid choice. Please select a valid option.\r\n");
     c90:	f8 94       	cli
     c92:	de bf       	out	0x3e, r29	; 62
     c94:	0f be       	out	0x3f, r0	; 63
     c96:	cd bf       	out	0x3d, r28	; 61
     c98:	df 91       	pop	r29
			}
			
			
		}
	}
}
     c9a:	cf 91       	pop	r28
     c9c:	1f 91       	pop	r17
     c9e:	0f 91       	pop	r16
     ca0:	ff 90       	pop	r15
     ca2:	ef 90       	pop	r14
     ca4:	df 90       	pop	r13
     ca6:	cf 90       	pop	r12
     ca8:	bf 90       	pop	r11
     caa:	af 90       	pop	r10
     cac:	9f 90       	pop	r9
     cae:	8f 90       	pop	r8
     cb0:	7f 90       	pop	r7
     cb2:	6f 90       	pop	r6
     cb4:	5f 90       	pop	r5
     cb6:	4f 90       	pop	r4
     cb8:	3f 90       	pop	r3
     cba:	2f 90       	pop	r2
     cbc:	08 95       	ret

00000cbe <ComandsLCDFRIDGE>:
     cbe:	0f 93       	push	r16
     cc0:	1f 93       	push	r17
     cc2:	cf 93       	push	r28
     cc4:	df 93       	push	r29
     cc6:	c2 e0       	ldi	r28, 0x02	; 2
     cc8:	d1 e0       	ldi	r29, 0x01	; 1
     cca:	88 81       	ld	r24, Y
     ccc:	8f 7d       	andi	r24, 0xDF	; 223
	
}

void ComandsLCDFRIDGE(){
		// Switch to command mode
		PORTH &= ~(1 << PH5);
     cce:	88 83       	st	Y, r24
		latch();
     cd0:	11 db       	rcall	.-2526   	; 0x2f4 <latch>

		// Clear the LCD display
		PORTJ = 0x01;
     cd2:	05 e0       	ldi	r16, 0x05	; 5
     cd4:	11 e0       	ldi	r17, 0x01	; 1
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	f8 01       	movw	r30, r16
		latch();
     cda:	80 83       	st	Z, r24
     cdc:	0b db       	rcall	.-2538   	; 0x2f4 <latch>
		PORTJ = 0XC0;
     cde:	80 ec       	ldi	r24, 0xC0	; 192
     ce0:	f8 01       	movw	r30, r16
		latch();
     ce2:	80 83       	st	Z, r24
     ce4:	07 db       	rcall	.-2546   	; 0x2f4 <latch>
		// Set the LCD back to data mode
		PORTH |= (1 << PH5);
     ce6:	88 81       	ld	r24, Y
     ce8:	80 62       	ori	r24, 0x20	; 32
     cea:	88 83       	st	Y, r24
		PORTH &= ~(1 << PH6);
     cec:	88 81       	ld	r24, Y
     cee:	8f 7b       	andi	r24, 0xBF	; 191
     cf0:	88 83       	st	Y, r24
}
     cf2:	df 91       	pop	r29
     cf4:	cf 91       	pop	r28
     cf6:	1f 91       	pop	r17
     cf8:	0f 91       	pop	r16
     cfa:	08 95       	ret

00000cfc <totalamount>:
void totalamount(int bottleNumber){
     cfc:	cf 92       	push	r12
     cfe:	df 92       	push	r13
     d00:	ef 92       	push	r14
     d02:	ff 92       	push	r15
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	cd b7       	in	r28, 0x3d	; 61
     d0e:	de b7       	in	r29, 0x3e	; 62
     d10:	64 97       	sbiw	r28, 0x14	; 20
     d12:	0f b6       	in	r0, 0x3f	; 63
     d14:	f8 94       	cli
     d16:	de bf       	out	0x3e, r29	; 62
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	cd bf       	out	0x3d, r28	; 61
     d1c:	18 2f       	mov	r17, r24
     d1e:	09 2f       	mov	r16, r25
	// Read the current bottle count from EEPROM
	uint16_t currentBottleCount = eeprom_read_word((uint16_t*)FRIDGE_BOTTLE_COUNT_ADDR);
     d20:	84 e8       	ldi	r24, 0x84	; 132
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	fd d5       	rcall	.+3066   	; 0x1920 <eeprom_read_word>
     d26:	6c 01       	movw	r12, r24
	// Capture the number of bottles from your input source
	int userInputBottleNumber = bottleNumber; // Example number

	// Calculate the total amount
	money = 1500;
     d28:	2c ed       	ldi	r18, 0xDC	; 220
     d2a:	35 e0       	ldi	r19, 0x05	; 5
     d2c:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     d30:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
	unsigned int totalAmount = userInputBottleNumber * money;
     d34:	e1 2e       	mov	r14, r17
     d36:	f0 2e       	mov	r15, r16
     d38:	e2 9e       	mul	r14, r18
     d3a:	c0 01       	movw	r24, r0
     d3c:	e3 9e       	mul	r14, r19
     d3e:	90 0d       	add	r25, r0
     d40:	f2 9e       	mul	r15, r18
     d42:	90 0d       	add	r25, r0
     d44:	11 24       	eor	r1, r1

	// Display the number of bottles and the total amount
	char displayStr[20]; // Adjust the size as needed
	sprintf(displayStr, "Bottles: %d FEE: %u", userInputBottleNumber, totalAmount);
     d46:	9f 93       	push	r25
     d48:	8f 93       	push	r24
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	83 e5       	ldi	r24, 0x53	; 83
     d50:	98 e0       	ldi	r25, 0x08	; 8
     d52:	9f 93       	push	r25
     d54:	8f 93       	push	r24
     d56:	ce 01       	movw	r24, r28
     d58:	01 96       	adiw	r24, 0x01	; 1
     d5a:	9f 93       	push	r25
     d5c:	8f 93       	push	r24
     d5e:	e5 d2       	rcall	.+1482   	; 0x132a <sprintf>
	
	// Print the combined information on the LCD
	for (int i = 0; displayStr[i] != '\0'; i++) {
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
     d6a:	00 e0       	ldi	r16, 0x00	; 0
     d6c:	10 e0       	ldi	r17, 0x00	; 0
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <totalamount+0x7e>
		PORTJ = displayStr[i];
     d70:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
		latch();
     d74:	bf da       	rcall	.-2690   	; 0x2f4 <latch>
	// Display the number of bottles and the total amount
	char displayStr[20]; // Adjust the size as needed
	sprintf(displayStr, "Bottles: %d FEE: %u", userInputBottleNumber, totalAmount);
	
	// Print the combined information on the LCD
	for (int i = 0; displayStr[i] != '\0'; i++) {
     d76:	0f 5f       	subi	r16, 0xFF	; 255
     d78:	1f 4f       	sbci	r17, 0xFF	; 255
     d7a:	e1 e0       	ldi	r30, 0x01	; 1
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	ec 0f       	add	r30, r28
     d80:	fd 1f       	adc	r31, r29
     d82:	e0 0f       	add	r30, r16
     d84:	f1 1f       	adc	r31, r17
     d86:	80 81       	ld	r24, Z
     d88:	81 11       	cpse	r24, r1
     d8a:	f2 cf       	rjmp	.-28     	; 0xd70 <totalamount+0x74>
		PORTJ = displayStr[i];
		latch();
	}
	 // Check if there are enough bottles in the fridge
	 if (userInputBottleNumber <= currentBottleCount) {
     d8c:	ce 14       	cp	r12, r14
     d8e:	df 04       	cpc	r13, r15
     d90:	30 f0       	brcs	.+12     	; 0xd9e <totalamount+0xa2>
		 // Subtract the user-input number of bottles from the current count
		 currentBottleCount -= userInputBottleNumber;
     d92:	b6 01       	movw	r22, r12
     d94:	6e 19       	sub	r22, r14

		 // Write the updated bottle count back to EEPROM
		 eeprom_update_word((uint16_t*)FRIDGE_BOTTLE_COUNT_ADDR, currentBottleCount);
     d96:	7f 09       	sbc	r23, r15
     d98:	84 e8       	ldi	r24, 0x84	; 132
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	e7 d5       	rcall	.+3022   	; 0x196c <eeprom_update_word>

		 
	 }
	 
}
     d9e:	64 96       	adiw	r28, 0x14	; 20
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	ff 90       	pop	r15
     db4:	ef 90       	pop	r14
     db6:	df 90       	pop	r13
     db8:	cf 90       	pop	r12
     dba:	08 95       	ret

00000dbc <selectOption>:

void selectOption(){
	printLcdFridge("TO CONTINUE, PRESS # or * TO STOP");
     dbc:	87 e6       	ldi	r24, 0x67	; 103
     dbe:	98 e0       	ldi	r25, 0x08	; 8
     dc0:	4a cb       	rjmp	.-2412   	; 0x456 <printLcdFridge>
     dc2:	08 95       	ret

00000dc4 <printwelc>:
}
void printwelc(){
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
	if ((PIND & 0b00000001) ==0) { // Check if the switch is closed (LOW)
     dc8:	48 99       	sbic	0x09, 0	; 9
     dca:	23 c0       	rjmp	.+70     	; 0xe12 <printwelc+0x4e>

		// Data mode
		PORTB |= (1 << PB5);
     dcc:	85 b1       	in	r24, 0x05	; 5
     dce:	80 62       	ori	r24, 0x20	; 32
     dd0:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << PB6);
     dd2:	85 b1       	in	r24, 0x05	; 5
     dd4:	8f 7b       	andi	r24, 0xBF	; 191
     dd6:	85 b9       	out	0x05, r24	; 5
		
		// Print "car" on the LCD
		for (int w = 0; w < 17; w++) {
     dd8:	c0 e0       	ldi	r28, 0x00	; 0
     dda:	d0 e0       	ldi	r29, 0x00	; 0
     ddc:	07 c0       	rjmp	.+14     	; 0xdec <printwelc+0x28>
			PORTA = car[w];
     dde:	fe 01       	movw	r30, r28
     de0:	e7 5a       	subi	r30, 0xA7	; 167
     de2:	fd 4f       	sbci	r31, 0xFD	; 253
     de4:	80 81       	ld	r24, Z
     de6:	82 b9       	out	0x02, r24	; 2
			latch2();
     de8:	9a da       	rcall	.-2764   	; 0x31e <latch2>
		// Data mode
		PORTB |= (1 << PB5);
		PORTB &= ~(1 << PB6);
		
		// Print "car" on the LCD
		for (int w = 0; w < 17; w++) {
     dea:	21 96       	adiw	r28, 0x01	; 1
     dec:	c1 31       	cpi	r28, 0x11	; 17
     dee:	d1 05       	cpc	r29, r1
     df0:	b4 f3       	brlt	.-20     	; 0xdde <printwelc+0x1a>
			PORTA = car[w];
			latch2();
		}

		PORTA = 0X80;
     df2:	80 e8       	ldi	r24, 0x80	; 128
		latch2();
     df4:	82 b9       	out	0x02, r24	; 2
     df6:	93 da       	rcall	.-2778   	; 0x31e <latch2>
		for (int x = 0; x < 20; x++) {
     df8:	c0 e0       	ldi	r28, 0x00	; 0
     dfa:	d0 e0       	ldi	r29, 0x00	; 0
     dfc:	07 c0       	rjmp	.+14     	; 0xe0c <printwelc+0x48>
			PORTA = reg[x];
     dfe:	fe 01       	movw	r30, r28
     e00:	e9 5b       	subi	r30, 0xB9	; 185
     e02:	fd 4f       	sbci	r31, 0xFD	; 253
     e04:	80 81       	ld	r24, Z
			latch2();
     e06:	82 b9       	out	0x02, r24	; 2
     e08:	8a da       	rcall	.-2796   	; 0x31e <latch2>
			latch2();
		}

		PORTA = 0X80;
		latch2();
		for (int x = 0; x < 20; x++) {
     e0a:	21 96       	adiw	r28, 0x01	; 1
     e0c:	c4 31       	cpi	r28, 0x14	; 20
     e0e:	d1 05       	cpc	r29, r1
     e10:	b4 f3       	brlt	.-20     	; 0xdfe <printwelc+0x3a>
			latch2();
		}
		
	}

}
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	08 95       	ret

00000e18 <main>:
int main(void) {
	DDRL = 0b00001111;
     e18:	8f e0       	ldi	r24, 0x0F	; 15
     e1a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
	DDRH = 0XFF;
     e1e:	8f ef       	ldi	r24, 0xFF	; 255
     e20:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
	DDRJ = 0XFF;
     e24:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x7c0104>
	DDRD = 0X00;
     e28:	1a b8       	out	0x0a, r1	; 10
	DDRC = 0Xff;
     e2a:	87 b9       	out	0x07, r24	; 7
	DDRF = 0XFF;
     e2c:	80 bb       	out	0x10, r24	; 16
	DDRA =0XFF;
     e2e:	81 b9       	out	0x01, r24	; 1
	DDRB =0XFF;
     e30:	84 b9       	out	0x04, r24	; 4
	
	// LCD initialization
	PORTH &= ~(1 << PH5);
     e32:	e2 e0       	ldi	r30, 0x02	; 2
     e34:	f1 e0       	ldi	r31, 0x01	; 1
     e36:	80 81       	ld	r24, Z
     e38:	8f 7d       	andi	r24, 0xDF	; 223
     e3a:	80 83       	st	Z, r24
	PORTH &= ~(1 << PH6);
     e3c:	80 81       	ld	r24, Z
     e3e:	8f 7b       	andi	r24, 0xBF	; 191
     e40:	80 83       	st	Z, r24
	PORTJ = 0B00001110;
     e42:	ce e0       	ldi	r28, 0x0E	; 14
     e44:	c0 93 05 01 	sts	0x0105, r28	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
	latch();
     e48:	55 da       	rcall	.-2902   	; 0x2f4 <latch>
	
	//lcd 2
	PORTB &= ~(1 << PB5);
     e4a:	85 b1       	in	r24, 0x05	; 5
     e4c:	8f 7d       	andi	r24, 0xDF	; 223
     e4e:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << PB6);
     e50:	85 b1       	in	r24, 0x05	; 5
     e52:	8f 7b       	andi	r24, 0xBF	; 191
     e54:	85 b9       	out	0x05, r24	; 5
	PORTA = 0B00001110;
	latch2();
     e56:	c2 b9       	out	0x02, r28	; 2
     e58:	62 da       	rcall	.-2876   	; 0x31e <latch2>

	
	// Interrupt enabling
	sei();
     e5a:	78 94       	sei
	EIMSK |= (1 << INT0);
     e5c:	8d b3       	in	r24, 0x1d	; 29
     e5e:	81 60       	ori	r24, 0x01	; 1
	

	
	
	// Initialize the UART module
	initUART();
     e60:	8d bb       	out	0x1d, r24	; 29
     e62:	7c d9       	rcall	.-3336   	; 0x15c <initUART>
	// CLEAR
	
	clearEEPROM();
     e64:	d9 d9       	rcall	.-3150   	; 0x218 <clearEEPROM>
	// Set the login password ()
	setLoginPassword("12345");
     e66:	89 e8       	ldi	r24, 0x89	; 137
     e68:	98 e0       	ldi	r25, 0x08	; 8
     e6a:	e7 d9       	rcall	.-3122   	; 0x23a <setLoginPassword>

	// setLoginPassword("12345");

	virtualTerminal();
     e6c:	a9 d9       	rcall	.-3246   	; 0x1c0 <virtualTerminal>
	}

	int carCounter = 0; // Counter for the number of registered cars
	char numberPlates[3][10]; // Store number plates of the registered cars
		// Call the menu function to start the menu system
		displayMenu();
     e6e:	0f db       	rcall	.-2530   	; 0x48e <displayMenu>
     e70:	60 e0       	ldi	r22, 0x00	; 0
		
		//clear
		 eeprom_update_word((uint16_t *)FRIDGE_BOTTLE_COUNT_ADDR, 0);
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	84 e8       	ldi	r24, 0x84	; 132
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	79 d5       	rcall	.+2802   	; 0x196c <eeprom_update_word>
     e7a:	8e ef       	ldi	r24, 0xFE	; 254
     e7c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
	/* Replace with your application code */
	while (1) {
		
	//KEYPAD CODE  FRIDGE
	
			PORTL = 0B11111110;
     e80:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x7c0109>
			if ((PINL & 0B00010000) == 0) {
     e84:	84 fd       	sbrc	r24, 4
     e86:	16 c0       	rjmp	.+44     	; 0xeb4 <main+0x9c>
     e88:	81 e0       	ldi	r24, 0x01	; 1
	
				userInputBottleNumber = 1;
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	90 93 ab 08 	sts	0x08AB, r25	; 0x8008ab <__data_end+0x1>
     e90:	80 93 aa 08 	sts	0x08AA, r24	; 0x8008aa <__data_end>
				
				ComandsLCDFRIDGE();
     e94:	14 df       	rcall	.-472    	; 0xcbe <ComandsLCDFRIDGE>
     e96:	81 e0       	ldi	r24, 0x01	; 1
				
				totalamount(1);
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	30 df       	rcall	.-416    	; 0xcfc <totalamount>
     e9c:	2f e7       	ldi	r18, 0x7F	; 127
     e9e:	36 e9       	ldi	r19, 0x96	; 150
     ea0:	88 e9       	ldi	r24, 0x98	; 152
     ea2:	21 50       	subi	r18, 0x01	; 1
     ea4:	30 40       	sbci	r19, 0x00	; 0
     ea6:	80 40       	sbci	r24, 0x00	; 0
     ea8:	e1 f7       	brne	.-8      	; 0xea2 <main+0x8a>
     eaa:	00 c0       	rjmp	.+0      	; 0xeac <main+0x94>
     eac:	00 00       	nop
				_delay_ms(50000);
				ComandsLCDFRIDGE();
     eae:	07 df       	rcall	.-498    	; 0xcbe <ComandsLCDFRIDGE>
     eb0:	85 df       	rcall	.-246    	; 0xdbc <selectOption>
				selectOption();
     eb2:	60 c0       	rjmp	.+192    	; 0xf74 <main+0x15c>
     eb4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x7c0109>
				
				
			}
			else if((PINL & 0B00100000) == 0){
     eb8:	85 fd       	sbrc	r24, 5
     eba:	16 c0       	rjmp	.+44     	; 0xee8 <main+0xd0>
			userInputBottleNumber =4;
     ebc:	84 e0       	ldi	r24, 0x04	; 4
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	90 93 ab 08 	sts	0x08AB, r25	; 0x8008ab <__data_end+0x1>
     ec4:	80 93 aa 08 	sts	0x08AA, r24	; 0x8008aa <__data_end>
				
				ComandsLCDFRIDGE();
     ec8:	fa de       	rcall	.-524    	; 0xcbe <ComandsLCDFRIDGE>
				totalamount(4);
     eca:	84 e0       	ldi	r24, 0x04	; 4
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	16 df       	rcall	.-468    	; 0xcfc <totalamount>
     ed0:	9f e7       	ldi	r25, 0x7F	; 127
     ed2:	e6 e9       	ldi	r30, 0x96	; 150
     ed4:	f8 e9       	ldi	r31, 0x98	; 152
     ed6:	91 50       	subi	r25, 0x01	; 1
     ed8:	e0 40       	sbci	r30, 0x00	; 0
     eda:	f0 40       	sbci	r31, 0x00	; 0
     edc:	e1 f7       	brne	.-8      	; 0xed6 <main+0xbe>
     ede:	00 c0       	rjmp	.+0      	; 0xee0 <main+0xc8>
				_delay_ms(50000);
				ComandsLCDFRIDGE();
     ee0:	00 00       	nop
     ee2:	ed de       	rcall	.-550    	; 0xcbe <ComandsLCDFRIDGE>
				selectOption();
     ee4:	6b df       	rcall	.-298    	; 0xdbc <selectOption>
     ee6:	46 c0       	rjmp	.+140    	; 0xf74 <main+0x15c>
			}
			else if((PINL & 0B01000000) == 0){
     ee8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x7c0109>
     eec:	86 fd       	sbrc	r24, 6
     eee:	16 c0       	rjmp	.+44     	; 0xf1c <main+0x104>
				userInputBottleNumber = 7;
     ef0:	87 e0       	ldi	r24, 0x07	; 7
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	90 93 ab 08 	sts	0x08AB, r25	; 0x8008ab <__data_end+0x1>
				
				ComandsLCDFRIDGE();
     ef8:	80 93 aa 08 	sts	0x08AA, r24	; 0x8008aa <__data_end>
				
				totalamount(7);
     efc:	e0 de       	rcall	.-576    	; 0xcbe <ComandsLCDFRIDGE>
     efe:	87 e0       	ldi	r24, 0x07	; 7
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	fc de       	rcall	.-520    	; 0xcfc <totalamount>
     f04:	2f e7       	ldi	r18, 0x7F	; 127
     f06:	36 e9       	ldi	r19, 0x96	; 150
     f08:	88 e9       	ldi	r24, 0x98	; 152
     f0a:	21 50       	subi	r18, 0x01	; 1
     f0c:	30 40       	sbci	r19, 0x00	; 0
     f0e:	80 40       	sbci	r24, 0x00	; 0
     f10:	e1 f7       	brne	.-8      	; 0xf0a <main+0xf2>
     f12:	00 c0       	rjmp	.+0      	; 0xf14 <main+0xfc>
				_delay_ms(50000);
				ComandsLCDFRIDGE();
     f14:	00 00       	nop
     f16:	d3 de       	rcall	.-602    	; 0xcbe <ComandsLCDFRIDGE>
				selectOption();
     f18:	51 df       	rcall	.-350    	; 0xdbc <selectOption>
     f1a:	2c c0       	rjmp	.+88     	; 0xf74 <main+0x15c>
				
				
			}
			else if((PINL & 0B10000000) == 0) {
     f1c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x7c0109>
     f20:	88 23       	and	r24, r24
				// User canceled the transaction by pressing '*'
				bottleNumber = 0; // Set the bottle number to 0 to represent cancellation
     f22:	44 f1       	brlt	.+80     	; 0xf74 <main+0x15c>
     f24:	10 92 ad 08 	sts	0x08AD, r1	; 0x8008ad <bottleNumber+0x1>
     f28:	10 92 ac 08 	sts	0x08AC, r1	; 0x8008ac <bottleNumber>

				// Switch to command mode
				PORTH &= ~(1 << PH5);
     f2c:	c2 e0       	ldi	r28, 0x02	; 2
     f2e:	d1 e0       	ldi	r29, 0x01	; 1
     f30:	88 81       	ld	r24, Y
     f32:	8f 7d       	andi	r24, 0xDF	; 223
				latch();
     f34:	88 83       	st	Y, r24
     f36:	de d9       	rcall	.-3140   	; 0x2f4 <latch>

				// Clear the LCD display
				PORTJ = 0x01;
     f38:	05 e0       	ldi	r16, 0x05	; 5
     f3a:	11 e0       	ldi	r17, 0x01	; 1
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	f8 01       	movw	r30, r16
				latch();
     f40:	80 83       	st	Z, r24
     f42:	d8 d9       	rcall	.-3152   	; 0x2f4 <latch>
				PORTJ = 0XC0;
     f44:	80 ec       	ldi	r24, 0xC0	; 192
     f46:	f8 01       	movw	r30, r16
     f48:	80 83       	st	Z, r24
				latch();
     f4a:	d4 d9       	rcall	.-3160   	; 0x2f4 <latch>
     f4c:	88 81       	ld	r24, Y
				// Set the LCD back to data mode
				PORTH |= (1 << PH5);
     f4e:	80 62       	ori	r24, 0x20	; 32
     f50:	88 83       	st	Y, r24
     f52:	88 81       	ld	r24, Y
				PORTH &= ~(1 << PH6);
     f54:	8f 7b       	andi	r24, 0xBF	; 191
     f56:	88 83       	st	Y, r24
     f58:	c0 e0       	ldi	r28, 0x00	; 0

				// Print the "Cancilled" message
				for (int x = 0; x < 10; x++) {
     f5a:	d0 e0       	ldi	r29, 0x00	; 0
     f5c:	08 c0       	rjmp	.+16     	; 0xf6e <main+0x156>
     f5e:	fe 01       	movw	r30, r28
					PORTJ = conc[x];
     f60:	e3 5c       	subi	r30, 0xC3	; 195
     f62:	fd 4f       	sbci	r31, 0xFD	; 253
     f64:	80 81       	ld	r24, Z
     f66:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
					latch();
     f6a:	c4 d9       	rcall	.-3192   	; 0x2f4 <latch>
				// Set the LCD back to data mode
				PORTH |= (1 << PH5);
				PORTH &= ~(1 << PH6);

				// Print the "Cancilled" message
				for (int x = 0; x < 10; x++) {
     f6c:	21 96       	adiw	r28, 0x01	; 1
     f6e:	ca 30       	cpi	r28, 0x0A	; 10
     f70:	d1 05       	cpc	r29, r1
     f72:	ac f3       	brlt	.-22     	; 0xf5e <main+0x146>
				}
				
			}
			
			
			PORTL = 0B11111101;
     f74:	8d ef       	ldi	r24, 0xFD	; 253
     f76:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
			
			if ((PINL & 0B00010000) == 0) {
     f7a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x7c0109>
				userInputBottleNumber = 2;
     f7e:	84 fd       	sbrc	r24, 4
     f80:	16 c0       	rjmp	.+44     	; 0xfae <main+0x196>
     f82:	82 e0       	ldi	r24, 0x02	; 2
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	90 93 ab 08 	sts	0x08AB, r25	; 0x8008ab <__data_end+0x1>
				
				ComandsLCDFRIDGE();
     f8a:	80 93 aa 08 	sts	0x08AA, r24	; 0x8008aa <__data_end>
				
				totalamount(2);
     f8e:	97 de       	rcall	.-722    	; 0xcbe <ComandsLCDFRIDGE>
     f90:	82 e0       	ldi	r24, 0x02	; 2
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	b3 de       	rcall	.-666    	; 0xcfc <totalamount>
     f96:	ff e7       	ldi	r31, 0x7F	; 127
     f98:	26 e9       	ldi	r18, 0x96	; 150
     f9a:	38 e9       	ldi	r19, 0x98	; 152
     f9c:	f1 50       	subi	r31, 0x01	; 1
     f9e:	20 40       	sbci	r18, 0x00	; 0
     fa0:	30 40       	sbci	r19, 0x00	; 0
     fa2:	e1 f7       	brne	.-8      	; 0xf9c <main+0x184>
     fa4:	00 c0       	rjmp	.+0      	; 0xfa6 <main+0x18e>
				_delay_ms(50000);
				ComandsLCDFRIDGE();
     fa6:	00 00       	nop
				selectOption();
     fa8:	8a de       	rcall	.-748    	; 0xcbe <ComandsLCDFRIDGE>
     faa:	08 df       	rcall	.-496    	; 0xdbc <selectOption>
     fac:	60 c0       	rjmp	.+192    	; 0x106e <__EEPROM_REGION_LENGTH__+0x6e>
				
			}
			else if((PINL & 0B00100000) == 0){
     fae:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x7c0109>
     fb2:	85 fd       	sbrc	r24, 5
     fb4:	16 c0       	rjmp	.+44     	; 0xfe2 <main+0x1ca>
				userInputBottleNumber = 5;
     fb6:	85 e0       	ldi	r24, 0x05	; 5
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	90 93 ab 08 	sts	0x08AB, r25	; 0x8008ab <__data_end+0x1>
     fbe:	80 93 aa 08 	sts	0x08AA, r24	; 0x8008aa <__data_end>
			
				ComandsLCDFRIDGE();
				totalamount(5);
     fc2:	7d de       	rcall	.-774    	; 0xcbe <ComandsLCDFRIDGE>
     fc4:	85 e0       	ldi	r24, 0x05	; 5
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	99 de       	rcall	.-718    	; 0xcfc <totalamount>
     fca:	8f e7       	ldi	r24, 0x7F	; 127
     fcc:	96 e9       	ldi	r25, 0x96	; 150
     fce:	e8 e9       	ldi	r30, 0x98	; 152
     fd0:	81 50       	subi	r24, 0x01	; 1
     fd2:	90 40       	sbci	r25, 0x00	; 0
     fd4:	e0 40       	sbci	r30, 0x00	; 0
     fd6:	e1 f7       	brne	.-8      	; 0xfd0 <main+0x1b8>
				_delay_ms(50000);
				ComandsLCDFRIDGE();
     fd8:	00 c0       	rjmp	.+0      	; 0xfda <main+0x1c2>
     fda:	00 00       	nop
				selectOption();
     fdc:	70 de       	rcall	.-800    	; 0xcbe <ComandsLCDFRIDGE>
     fde:	ee de       	rcall	.-548    	; 0xdbc <selectOption>
     fe0:	46 c0       	rjmp	.+140    	; 0x106e <__EEPROM_REGION_LENGTH__+0x6e>
				
			}
			else if((PINL & 0B01000000) == 0){
     fe2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x7c0109>
     fe6:	86 fd       	sbrc	r24, 6
     fe8:	16 c0       	rjmp	.+44     	; 0x1016 <__EEPROM_REGION_LENGTH__+0x16>
				userInputBottleNumber = 8;
     fea:	88 e0       	ldi	r24, 0x08	; 8
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	90 93 ab 08 	sts	0x08AB, r25	; 0x8008ab <__data_end+0x1>
     ff2:	80 93 aa 08 	sts	0x08AA, r24	; 0x8008aa <__data_end>
				ComandsLCDFRIDGE();
     ff6:	63 de       	rcall	.-826    	; 0xcbe <ComandsLCDFRIDGE>
				totalamount(8);
     ff8:	88 e0       	ldi	r24, 0x08	; 8
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	7f de       	rcall	.-770    	; 0xcfc <totalamount>
     ffe:	ff e7       	ldi	r31, 0x7F	; 127
    1000:	26 e9       	ldi	r18, 0x96	; 150
    1002:	38 e9       	ldi	r19, 0x98	; 152
    1004:	f1 50       	subi	r31, 0x01	; 1
    1006:	20 40       	sbci	r18, 0x00	; 0
    1008:	30 40       	sbci	r19, 0x00	; 0
    100a:	e1 f7       	brne	.-8      	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
    100c:	00 c0       	rjmp	.+0      	; 0x100e <__EEPROM_REGION_LENGTH__+0xe>
				_delay_ms(50000);
				ComandsLCDFRIDGE();
    100e:	00 00       	nop
    1010:	56 de       	rcall	.-852    	; 0xcbe <ComandsLCDFRIDGE>
				selectOption();
    1012:	d4 de       	rcall	.-600    	; 0xdbc <selectOption>
    1014:	2c c0       	rjmp	.+88     	; 0x106e <__EEPROM_REGION_LENGTH__+0x6e>
    1016:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x7c0109>
		
			}
			else if((PINL & 0B10000000) == 0) {
    101a:	88 23       	and	r24, r24
    101c:	44 f1       	brlt	.+80     	; 0x106e <__EEPROM_REGION_LENGTH__+0x6e>
				// User canceled the transaction by pressing '*'
				bottleNumber = 0; // Set the bottle number to 0 to represent cancellation
    101e:	10 92 ad 08 	sts	0x08AD, r1	; 0x8008ad <bottleNumber+0x1>
    1022:	10 92 ac 08 	sts	0x08AC, r1	; 0x8008ac <bottleNumber>

				// Switch to command mode
				PORTH &= ~(1 << PH5);
    1026:	c2 e0       	ldi	r28, 0x02	; 2
    1028:	d1 e0       	ldi	r29, 0x01	; 1
    102a:	88 81       	ld	r24, Y
    102c:	8f 7d       	andi	r24, 0xDF	; 223
    102e:	88 83       	st	Y, r24
				latch();
    1030:	61 d9       	rcall	.-3390   	; 0x2f4 <latch>
    1032:	05 e0       	ldi	r16, 0x05	; 5

				// Clear the LCD display
				PORTJ = 0x01;
    1034:	11 e0       	ldi	r17, 0x01	; 1
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	f8 01       	movw	r30, r16
    103a:	80 83       	st	Z, r24
    103c:	5b d9       	rcall	.-3402   	; 0x2f4 <latch>
				latch();
    103e:	80 ec       	ldi	r24, 0xC0	; 192
				PORTJ = 0XC0;
    1040:	f8 01       	movw	r30, r16
    1042:	80 83       	st	Z, r24
				latch();
    1044:	57 d9       	rcall	.-3410   	; 0x2f4 <latch>
    1046:	88 81       	ld	r24, Y
				// Set the LCD back to data mode
				PORTH |= (1 << PH5);
    1048:	80 62       	ori	r24, 0x20	; 32
    104a:	88 83       	st	Y, r24
    104c:	88 81       	ld	r24, Y
				PORTH &= ~(1 << PH6);
    104e:	8f 7b       	andi	r24, 0xBF	; 191
    1050:	88 83       	st	Y, r24
    1052:	c0 e0       	ldi	r28, 0x00	; 0

				// Print the "Cancilled" message
				for (int x = 0; x < 10; x++) {
    1054:	d0 e0       	ldi	r29, 0x00	; 0
    1056:	08 c0       	rjmp	.+16     	; 0x1068 <__EEPROM_REGION_LENGTH__+0x68>
					PORTJ = succ[x];
    1058:	fe 01       	movw	r30, r28
    105a:	eb 5c       	subi	r30, 0xCB	; 203
    105c:	fd 4f       	sbci	r31, 0xFD	; 253
    105e:	80 81       	ld	r24, Z
    1060:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
					latch();
    1064:	47 d9       	rcall	.-3442   	; 0x2f4 <latch>
    1066:	21 96       	adiw	r28, 0x01	; 1
				// Set the LCD back to data mode
				PORTH |= (1 << PH5);
				PORTH &= ~(1 << PH6);

				// Print the "Cancilled" message
				for (int x = 0; x < 10; x++) {
    1068:	ca 30       	cpi	r28, 0x0A	; 10
    106a:	d1 05       	cpc	r29, r1
    106c:	ac f3       	brlt	.-22     	; 0x1058 <__EEPROM_REGION_LENGTH__+0x58>
					latch();
				}
				
			}
			
			PORTL = 0B11111011;
    106e:	8b ef       	ldi	r24, 0xFB	; 251
    1070:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
			
			if ((PINL & 0B00010000) == 0) {
    1074:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x7c0109>
    1078:	84 fd       	sbrc	r24, 4
				userInputBottleNumber = 3;
    107a:	16 c0       	rjmp	.+44     	; 0x10a8 <__EEPROM_REGION_LENGTH__+0xa8>
    107c:	83 e0       	ldi	r24, 0x03	; 3
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	90 93 ab 08 	sts	0x08AB, r25	; 0x8008ab <__data_end+0x1>
				ComandsLCDFRIDGE();
    1084:	80 93 aa 08 	sts	0x08AA, r24	; 0x8008aa <__data_end>
				totalamount(3);
    1088:	1a de       	rcall	.-972    	; 0xcbe <ComandsLCDFRIDGE>
    108a:	83 e0       	ldi	r24, 0x03	; 3
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	36 de       	rcall	.-916    	; 0xcfc <totalamount>
    1090:	ff e7       	ldi	r31, 0x7F	; 127
    1092:	26 e9       	ldi	r18, 0x96	; 150
    1094:	38 e9       	ldi	r19, 0x98	; 152
    1096:	f1 50       	subi	r31, 0x01	; 1
    1098:	20 40       	sbci	r18, 0x00	; 0
    109a:	30 40       	sbci	r19, 0x00	; 0
    109c:	e1 f7       	brne	.-8      	; 0x1096 <__EEPROM_REGION_LENGTH__+0x96>
				_delay_ms(50000);
				ComandsLCDFRIDGE();
    109e:	00 c0       	rjmp	.+0      	; 0x10a0 <__EEPROM_REGION_LENGTH__+0xa0>
				selectOption();
    10a0:	00 00       	nop
    10a2:	0d de       	rcall	.-998    	; 0xcbe <ComandsLCDFRIDGE>
    10a4:	8b de       	rcall	.-746    	; 0xdbc <selectOption>
				
			}
			else if((PINL & 0B00100000) == 0){
    10a6:	e9 ce       	rjmp	.-558    	; 0xe7a <main+0x62>
    10a8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x7c0109>
    10ac:	85 fd       	sbrc	r24, 5
				userInputBottleNumber = 6;
    10ae:	16 c0       	rjmp	.+44     	; 0x10dc <__EEPROM_REGION_LENGTH__+0xdc>
    10b0:	86 e0       	ldi	r24, 0x06	; 6
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	90 93 ab 08 	sts	0x08AB, r25	; 0x8008ab <__data_end+0x1>
				ComandsLCDFRIDGE();
    10b8:	80 93 aa 08 	sts	0x08AA, r24	; 0x8008aa <__data_end>
				totalamount(6);
    10bc:	00 de       	rcall	.-1024   	; 0xcbe <ComandsLCDFRIDGE>
    10be:	86 e0       	ldi	r24, 0x06	; 6
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	1c de       	rcall	.-968    	; 0xcfc <totalamount>
    10c4:	8f e7       	ldi	r24, 0x7F	; 127
    10c6:	96 e9       	ldi	r25, 0x96	; 150
    10c8:	e8 e9       	ldi	r30, 0x98	; 152
    10ca:	81 50       	subi	r24, 0x01	; 1
    10cc:	90 40       	sbci	r25, 0x00	; 0
				_delay_ms(50000);
				ComandsLCDFRIDGE();
    10ce:	e0 40       	sbci	r30, 0x00	; 0
    10d0:	e1 f7       	brne	.-8      	; 0x10ca <__EEPROM_REGION_LENGTH__+0xca>
				selectOption();
    10d2:	00 c0       	rjmp	.+0      	; 0x10d4 <__EEPROM_REGION_LENGTH__+0xd4>
    10d4:	00 00       	nop
    10d6:	f3 dd       	rcall	.-1050   	; 0xcbe <ComandsLCDFRIDGE>
				
			}
			else if((PINL & 0B01000000) == 0){
    10d8:	71 de       	rcall	.-798    	; 0xdbc <selectOption>
    10da:	cf ce       	rjmp	.-610    	; 0xe7a <main+0x62>
    10dc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x7c0109>
				userInputBottleNumber = 9;
    10e0:	86 fd       	sbrc	r24, 6
    10e2:	16 c0       	rjmp	.+44     	; 0x1110 <__EEPROM_REGION_LENGTH__+0x110>
    10e4:	89 e0       	ldi	r24, 0x09	; 9
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	90 93 ab 08 	sts	0x08AB, r25	; 0x8008ab <__data_end+0x1>
				ComandsLCDFRIDGE();
    10ec:	80 93 aa 08 	sts	0x08AA, r24	; 0x8008aa <__data_end>
				totalamount(9);
    10f0:	e6 dd       	rcall	.-1076   	; 0xcbe <ComandsLCDFRIDGE>
    10f2:	89 e0       	ldi	r24, 0x09	; 9
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	02 de       	rcall	.-1020   	; 0xcfc <totalamount>
    10f8:	ff e7       	ldi	r31, 0x7F	; 127
    10fa:	26 e9       	ldi	r18, 0x96	; 150
    10fc:	38 e9       	ldi	r19, 0x98	; 152
    10fe:	f1 50       	subi	r31, 0x01	; 1
    1100:	20 40       	sbci	r18, 0x00	; 0
    1102:	30 40       	sbci	r19, 0x00	; 0
				_delay_ms(50000);
				ComandsLCDFRIDGE();
    1104:	e1 f7       	brne	.-8      	; 0x10fe <__EEPROM_REGION_LENGTH__+0xfe>
    1106:	00 c0       	rjmp	.+0      	; 0x1108 <__EEPROM_REGION_LENGTH__+0x108>
				selectOption();
    1108:	00 00       	nop
    110a:	d9 dd       	rcall	.-1102   	; 0xcbe <ComandsLCDFRIDGE>
    110c:	57 de       	rcall	.-850    	; 0xdbc <selectOption>
				
			}
			else if((PINL & 0B10000000) == 0) {
    110e:	b5 ce       	rjmp	.-662    	; 0xe7a <main+0x62>
    1110:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x7c0109>
    1114:	88 23       	and	r24, r24
    1116:	0c f4       	brge	.+2      	; 0x111a <__EEPROM_REGION_LENGTH__+0x11a>
				
				rotateMotor(3);
    1118:	b0 ce       	rjmp	.-672    	; 0xe7a <main+0x62>
    111a:	83 e0       	ldi	r24, 0x03	; 3
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	2d d8       	rcall	.-4006   	; 0x17a <rotateMotor>
				ComandsLCDFRIDGE();
    1120:	ce dd       	rcall	.-1124   	; 0xcbe <ComandsLCDFRIDGE>
    1122:	8f e8       	ldi	r24, 0x8F	; 143
				printLcdFridge("INSERT COINS ");
    1124:	98 e0       	ldi	r25, 0x08	; 8
    1126:	97 d9       	rcall	.-3282   	; 0x456 <printLcdFridge>
    1128:	84 ed       	ldi	r24, 0xD4	; 212
    112a:	90 e9       	ldi	r25, 0x90	; 144
    112c:	e7 ef       	ldi	r30, 0xF7	; 247
    112e:	f4 e0       	ldi	r31, 0x04	; 4
    1130:	81 50       	subi	r24, 0x01	; 1
    1132:	90 40       	sbci	r25, 0x00	; 0
    1134:	e0 40       	sbci	r30, 0x00	; 0
    1136:	f0 40       	sbci	r31, 0x00	; 0
    1138:	d9 f7       	brne	.-10     	; 0x1130 <__EEPROM_REGION_LENGTH__+0x130>
    113a:	00 c0       	rjmp	.+0      	; 0x113c <__EEPROM_REGION_LENGTH__+0x13c>
    113c:	00 c0       	rjmp	.+0      	; 0x113e <__EEPROM_REGION_LENGTH__+0x13e>
    113e:	00 00       	nop
    1140:	e2 e0       	ldi	r30, 0x02	; 2
    1142:	f1 e0       	ldi	r31, 0x01	; 1
				
				_delay_ms(500000);
				
				PORTH &=~(1<<PH5);
    1144:	80 81       	ld	r24, Z
    1146:	8f 7d       	andi	r24, 0xDF	; 223
    1148:	80 83       	st	Z, r24
    114a:	c5 e0       	ldi	r28, 0x05	; 5
    114c:	d1 e0       	ldi	r29, 0x01	; 1
				PORTJ = 0X01;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	88 83       	st	Y, r24
    1152:	d0 d8       	rcall	.-3680   	; 0x2f4 <latch>
    1154:	80 e8       	ldi	r24, 0x80	; 128
				latch();
    1156:	88 83       	st	Y, r24
    1158:	cd d8       	rcall	.-3686   	; 0x2f4 <latch>
				PORTJ = 0X80;
    115a:	8d e9       	ldi	r24, 0x9D	; 157
    115c:	98 e0       	ldi	r25, 0x08	; 8
				latch();
    115e:	7b d9       	rcall	.-3338   	; 0x456 <printLcdFridge>
    1160:	c0 e0       	ldi	r28, 0x00	; 0
				printLcdFridge("DISPENSING ");
    1162:	d0 e0       	ldi	r29, 0x00	; 0
    1164:	04 c0       	rjmp	.+8      	; 0x116e <__EEPROM_REGION_LENGTH__+0x16e>
    1166:	82 e0       	ldi	r24, 0x02	; 2
    1168:	90 e0       	ldi	r25, 0x00	; 0
				for (int x=0; x < userInputBottleNumber; x++)
    116a:	07 d8       	rcall	.-4082   	; 0x17a <rotateMotor>
    116c:	21 96       	adiw	r28, 0x01	; 1
    116e:	80 91 aa 08 	lds	r24, 0x08AA	; 0x8008aa <__data_end>
				{
					rotateMotor(2);
    1172:	90 91 ab 08 	lds	r25, 0x08AB	; 0x8008ab <__data_end+0x1>
    1176:	c8 17       	cp	r28, r24
				PORTJ = 0X01;
				latch();
				PORTJ = 0X80;
				latch();
				printLcdFridge("DISPENSING ");
				for (int x=0; x < userInputBottleNumber; x++)
    1178:	d9 07       	cpc	r29, r25
    117a:	ac f3       	brlt	.-22     	; 0x1166 <__EEPROM_REGION_LENGTH__+0x166>
    117c:	7e ce       	rjmp	.-772    	; 0xe7a <main+0x62>

0000117e <__vector_1>:
    117e:	1f 92       	push	r1
    1180:	0f 92       	push	r0
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	0f 92       	push	r0
    1186:	11 24       	eor	r1, r1
    1188:	0b b6       	in	r0, 0x3b	; 59
}




ISR(INT0_vect) {
    118a:	0f 92       	push	r0
    118c:	2f 93       	push	r18
    118e:	3f 93       	push	r19
    1190:	4f 93       	push	r20
    1192:	5f 93       	push	r21
    1194:	6f 93       	push	r22
    1196:	7f 93       	push	r23
    1198:	8f 93       	push	r24
    119a:	9f 93       	push	r25
    119c:	af 93       	push	r26
    119e:	bf 93       	push	r27
    11a0:	ef 93       	push	r30
    11a2:	ff 93       	push	r31
		PORTC ^=(1<<0);
    11a4:	98 b1       	in	r25, 0x08	; 8
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	89 27       	eor	r24, r25
    11aa:	88 b9       	out	0x08, r24	; 8

		printwelc();
    11ac:	0b de       	rcall	.-1002   	; 0xdc4 <printwelc>
}
    11ae:	ff 91       	pop	r31
    11b0:	ef 91       	pop	r30
    11b2:	bf 91       	pop	r27
    11b4:	af 91       	pop	r26
    11b6:	9f 91       	pop	r25
    11b8:	8f 91       	pop	r24
    11ba:	7f 91       	pop	r23
    11bc:	6f 91       	pop	r22
    11be:	5f 91       	pop	r21
    11c0:	4f 91       	pop	r20
    11c2:	3f 91       	pop	r19
    11c4:	2f 91       	pop	r18
    11c6:	0f 90       	pop	r0
    11c8:	0b be       	out	0x3b, r0	; 59
    11ca:	0f 90       	pop	r0
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	0f 90       	pop	r0
    11d0:	1f 90       	pop	r1
    11d2:	18 95       	reti

000011d4 <__tablejump2__>:
    11d4:	ee 0f       	add	r30, r30
    11d6:	ff 1f       	adc	r31, r31
    11d8:	88 1f       	adc	r24, r24
    11da:	8b bf       	out	0x3b, r24	; 59
    11dc:	07 90       	elpm	r0, Z+
    11de:	f6 91       	elpm	r31, Z
    11e0:	e0 2d       	mov	r30, r0
    11e2:	19 94       	eijmp

000011e4 <atoi>:
    11e4:	fc 01       	movw	r30, r24
    11e6:	88 27       	eor	r24, r24
    11e8:	99 27       	eor	r25, r25
    11ea:	e8 94       	clt
    11ec:	21 91       	ld	r18, Z+
    11ee:	20 32       	cpi	r18, 0x20	; 32
    11f0:	e9 f3       	breq	.-6      	; 0x11ec <atoi+0x8>
    11f2:	29 30       	cpi	r18, 0x09	; 9
    11f4:	10 f0       	brcs	.+4      	; 0x11fa <atoi+0x16>
    11f6:	2e 30       	cpi	r18, 0x0E	; 14
    11f8:	c8 f3       	brcs	.-14     	; 0x11ec <atoi+0x8>
    11fa:	2b 32       	cpi	r18, 0x2B	; 43
    11fc:	39 f0       	breq	.+14     	; 0x120c <atoi+0x28>
    11fe:	2d 32       	cpi	r18, 0x2D	; 45
    1200:	31 f4       	brne	.+12     	; 0x120e <atoi+0x2a>
    1202:	68 94       	set
    1204:	03 c0       	rjmp	.+6      	; 0x120c <atoi+0x28>
    1206:	34 d0       	rcall	.+104    	; 0x1270 <__mulhi_const_10>
    1208:	82 0f       	add	r24, r18
    120a:	91 1d       	adc	r25, r1
    120c:	21 91       	ld	r18, Z+
    120e:	20 53       	subi	r18, 0x30	; 48
    1210:	2a 30       	cpi	r18, 0x0A	; 10
    1212:	c8 f3       	brcs	.-14     	; 0x1206 <atoi+0x22>
    1214:	1e f4       	brtc	.+6      	; 0x121c <atoi+0x38>
    1216:	90 95       	com	r25
    1218:	81 95       	neg	r24
    121a:	9f 4f       	sbci	r25, 0xFF	; 255
    121c:	08 95       	ret

0000121e <strcmp>:
    121e:	fb 01       	movw	r30, r22
    1220:	dc 01       	movw	r26, r24
    1222:	8d 91       	ld	r24, X+
    1224:	01 90       	ld	r0, Z+
    1226:	80 19       	sub	r24, r0
    1228:	01 10       	cpse	r0, r1
    122a:	d9 f3       	breq	.-10     	; 0x1222 <strcmp+0x4>
    122c:	99 0b       	sbc	r25, r25
    122e:	08 95       	ret

00001230 <strcpy>:
    1230:	fb 01       	movw	r30, r22
    1232:	dc 01       	movw	r26, r24
    1234:	01 90       	ld	r0, Z+
    1236:	0d 92       	st	X+, r0
    1238:	00 20       	and	r0, r0
    123a:	e1 f7       	brne	.-8      	; 0x1234 <strcpy+0x4>
    123c:	08 95       	ret

0000123e <strncpy>:
    123e:	fb 01       	movw	r30, r22
    1240:	dc 01       	movw	r26, r24
    1242:	41 50       	subi	r20, 0x01	; 1
    1244:	50 40       	sbci	r21, 0x00	; 0
    1246:	48 f0       	brcs	.+18     	; 0x125a <strncpy+0x1c>
    1248:	01 90       	ld	r0, Z+
    124a:	0d 92       	st	X+, r0
    124c:	00 20       	and	r0, r0
    124e:	c9 f7       	brne	.-14     	; 0x1242 <strncpy+0x4>
    1250:	01 c0       	rjmp	.+2      	; 0x1254 <strncpy+0x16>
    1252:	1d 92       	st	X+, r1
    1254:	41 50       	subi	r20, 0x01	; 1
    1256:	50 40       	sbci	r21, 0x00	; 0
    1258:	e0 f7       	brcc	.-8      	; 0x1252 <strncpy+0x14>
    125a:	08 95       	ret

0000125c <__itoa_ncheck>:
    125c:	bb 27       	eor	r27, r27
    125e:	4a 30       	cpi	r20, 0x0A	; 10
    1260:	31 f4       	brne	.+12     	; 0x126e <__itoa_ncheck+0x12>
    1262:	99 23       	and	r25, r25
    1264:	22 f4       	brpl	.+8      	; 0x126e <__itoa_ncheck+0x12>
    1266:	bd e2       	ldi	r27, 0x2D	; 45
    1268:	90 95       	com	r25
    126a:	81 95       	neg	r24
    126c:	9f 4f       	sbci	r25, 0xFF	; 255
    126e:	09 c0       	rjmp	.+18     	; 0x1282 <__utoa_common>

00001270 <__mulhi_const_10>:
    1270:	7a e0       	ldi	r23, 0x0A	; 10
    1272:	97 9f       	mul	r25, r23
    1274:	90 2d       	mov	r25, r0
    1276:	87 9f       	mul	r24, r23
    1278:	80 2d       	mov	r24, r0
    127a:	91 0d       	add	r25, r1
    127c:	11 24       	eor	r1, r1
    127e:	08 95       	ret

00001280 <__utoa_ncheck>:
    1280:	bb 27       	eor	r27, r27

00001282 <__utoa_common>:
    1282:	fb 01       	movw	r30, r22
    1284:	55 27       	eor	r21, r21
    1286:	aa 27       	eor	r26, r26
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	aa 1f       	adc	r26, r26
    128e:	a4 17       	cp	r26, r20
    1290:	10 f0       	brcs	.+4      	; 0x1296 <__utoa_common+0x14>
    1292:	a4 1b       	sub	r26, r20
    1294:	83 95       	inc	r24
    1296:	50 51       	subi	r21, 0x10	; 16
    1298:	b9 f7       	brne	.-18     	; 0x1288 <__utoa_common+0x6>
    129a:	a0 5d       	subi	r26, 0xD0	; 208
    129c:	aa 33       	cpi	r26, 0x3A	; 58
    129e:	08 f0       	brcs	.+2      	; 0x12a2 <__utoa_common+0x20>
    12a0:	a9 5d       	subi	r26, 0xD9	; 217
    12a2:	a1 93       	st	Z+, r26
    12a4:	00 97       	sbiw	r24, 0x00	; 0
    12a6:	79 f7       	brne	.-34     	; 0x1286 <__utoa_common+0x4>
    12a8:	b1 11       	cpse	r27, r1
    12aa:	b1 93       	st	Z+, r27
    12ac:	11 92       	st	Z+, r1
    12ae:	cb 01       	movw	r24, r22
    12b0:	7d c2       	rjmp	.+1274   	; 0x17ac <strrev>

000012b2 <snprintf>:
    12b2:	0f 93       	push	r16
    12b4:	1f 93       	push	r17
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	2e 97       	sbiw	r28, 0x0e	; 14
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	f8 94       	cli
    12c4:	de bf       	out	0x3e, r29	; 62
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	cd bf       	out	0x3d, r28	; 61
    12ca:	0e 89       	ldd	r16, Y+22	; 0x16
    12cc:	1f 89       	ldd	r17, Y+23	; 0x17
    12ce:	88 8d       	ldd	r24, Y+24	; 0x18
    12d0:	99 8d       	ldd	r25, Y+25	; 0x19
    12d2:	26 e0       	ldi	r18, 0x06	; 6
    12d4:	2c 83       	std	Y+4, r18	; 0x04
    12d6:	1a 83       	std	Y+2, r17	; 0x02
    12d8:	09 83       	std	Y+1, r16	; 0x01
    12da:	97 ff       	sbrs	r25, 7
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <snprintf+0x30>
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	90 e8       	ldi	r25, 0x80	; 128
    12e2:	01 97       	sbiw	r24, 0x01	; 1
    12e4:	9e 83       	std	Y+6, r25	; 0x06
    12e6:	8d 83       	std	Y+5, r24	; 0x05
    12e8:	ae 01       	movw	r20, r28
    12ea:	44 5e       	subi	r20, 0xE4	; 228
    12ec:	5f 4f       	sbci	r21, 0xFF	; 255
    12ee:	6a 8d       	ldd	r22, Y+26	; 0x1a
    12f0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    12f2:	ce 01       	movw	r24, r28
    12f4:	01 96       	adiw	r24, 0x01	; 1
    12f6:	47 d0       	rcall	.+142    	; 0x1386 <vfprintf>
    12f8:	4d 81       	ldd	r20, Y+5	; 0x05
    12fa:	5e 81       	ldd	r21, Y+6	; 0x06
    12fc:	57 fd       	sbrc	r21, 7
    12fe:	0a c0       	rjmp	.+20     	; 0x1314 <snprintf+0x62>
    1300:	2f 81       	ldd	r18, Y+7	; 0x07
    1302:	38 85       	ldd	r19, Y+8	; 0x08
    1304:	42 17       	cp	r20, r18
    1306:	53 07       	cpc	r21, r19
    1308:	0c f4       	brge	.+2      	; 0x130c <snprintf+0x5a>
    130a:	9a 01       	movw	r18, r20
    130c:	f8 01       	movw	r30, r16
    130e:	e2 0f       	add	r30, r18
    1310:	f3 1f       	adc	r31, r19
    1312:	10 82       	st	Z, r1
    1314:	2e 96       	adiw	r28, 0x0e	; 14
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	de bf       	out	0x3e, r29	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	cd bf       	out	0x3d, r28	; 61
    1320:	df 91       	pop	r29
    1322:	cf 91       	pop	r28
    1324:	1f 91       	pop	r17
    1326:	0f 91       	pop	r16
    1328:	08 95       	ret

0000132a <sprintf>:
    132a:	0f 93       	push	r16
    132c:	1f 93       	push	r17
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
    1336:	2e 97       	sbiw	r28, 0x0e	; 14
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	f8 94       	cli
    133c:	de bf       	out	0x3e, r29	; 62
    133e:	0f be       	out	0x3f, r0	; 63
    1340:	cd bf       	out	0x3d, r28	; 61
    1342:	0e 89       	ldd	r16, Y+22	; 0x16
    1344:	1f 89       	ldd	r17, Y+23	; 0x17
    1346:	86 e0       	ldi	r24, 0x06	; 6
    1348:	8c 83       	std	Y+4, r24	; 0x04
    134a:	1a 83       	std	Y+2, r17	; 0x02
    134c:	09 83       	std	Y+1, r16	; 0x01
    134e:	8f ef       	ldi	r24, 0xFF	; 255
    1350:	9f e7       	ldi	r25, 0x7F	; 127
    1352:	9e 83       	std	Y+6, r25	; 0x06
    1354:	8d 83       	std	Y+5, r24	; 0x05
    1356:	ae 01       	movw	r20, r28
    1358:	46 5e       	subi	r20, 0xE6	; 230
    135a:	5f 4f       	sbci	r21, 0xFF	; 255
    135c:	68 8d       	ldd	r22, Y+24	; 0x18
    135e:	79 8d       	ldd	r23, Y+25	; 0x19
    1360:	ce 01       	movw	r24, r28
    1362:	01 96       	adiw	r24, 0x01	; 1
    1364:	10 d0       	rcall	.+32     	; 0x1386 <vfprintf>
    1366:	ef 81       	ldd	r30, Y+7	; 0x07
    1368:	f8 85       	ldd	r31, Y+8	; 0x08
    136a:	e0 0f       	add	r30, r16
    136c:	f1 1f       	adc	r31, r17
    136e:	10 82       	st	Z, r1
    1370:	2e 96       	adiw	r28, 0x0e	; 14
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	f8 94       	cli
    1376:	de bf       	out	0x3e, r29	; 62
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	cd bf       	out	0x3d, r28	; 61
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	1f 91       	pop	r17
    1382:	0f 91       	pop	r16
    1384:	08 95       	ret

00001386 <vfprintf>:
    1386:	2f 92       	push	r2
    1388:	3f 92       	push	r3
    138a:	4f 92       	push	r4
    138c:	5f 92       	push	r5
    138e:	6f 92       	push	r6
    1390:	7f 92       	push	r7
    1392:	8f 92       	push	r8
    1394:	9f 92       	push	r9
    1396:	af 92       	push	r10
    1398:	bf 92       	push	r11
    139a:	cf 92       	push	r12
    139c:	df 92       	push	r13
    139e:	ef 92       	push	r14
    13a0:	ff 92       	push	r15
    13a2:	0f 93       	push	r16
    13a4:	1f 93       	push	r17
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	2b 97       	sbiw	r28, 0x0b	; 11
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	f8 94       	cli
    13b4:	de bf       	out	0x3e, r29	; 62
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	cd bf       	out	0x3d, r28	; 61
    13ba:	6c 01       	movw	r12, r24
    13bc:	7b 01       	movw	r14, r22
    13be:	8a 01       	movw	r16, r20
    13c0:	fc 01       	movw	r30, r24
    13c2:	17 82       	std	Z+7, r1	; 0x07
    13c4:	16 82       	std	Z+6, r1	; 0x06
    13c6:	83 81       	ldd	r24, Z+3	; 0x03
    13c8:	81 ff       	sbrs	r24, 1
    13ca:	bf c1       	rjmp	.+894    	; 0x174a <vfprintf+0x3c4>
    13cc:	ce 01       	movw	r24, r28
    13ce:	01 96       	adiw	r24, 0x01	; 1
    13d0:	3c 01       	movw	r6, r24
    13d2:	f6 01       	movw	r30, r12
    13d4:	93 81       	ldd	r25, Z+3	; 0x03
    13d6:	f7 01       	movw	r30, r14
    13d8:	93 fd       	sbrc	r25, 3
    13da:	85 91       	lpm	r24, Z+
    13dc:	93 ff       	sbrs	r25, 3
    13de:	81 91       	ld	r24, Z+
    13e0:	7f 01       	movw	r14, r30
    13e2:	88 23       	and	r24, r24
    13e4:	09 f4       	brne	.+2      	; 0x13e8 <vfprintf+0x62>
    13e6:	ad c1       	rjmp	.+858    	; 0x1742 <vfprintf+0x3bc>
    13e8:	85 32       	cpi	r24, 0x25	; 37
    13ea:	39 f4       	brne	.+14     	; 0x13fa <vfprintf+0x74>
    13ec:	93 fd       	sbrc	r25, 3
    13ee:	85 91       	lpm	r24, Z+
    13f0:	93 ff       	sbrs	r25, 3
    13f2:	81 91       	ld	r24, Z+
    13f4:	7f 01       	movw	r14, r30
    13f6:	85 32       	cpi	r24, 0x25	; 37
    13f8:	21 f4       	brne	.+8      	; 0x1402 <vfprintf+0x7c>
    13fa:	b6 01       	movw	r22, r12
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	e6 d1       	rcall	.+972    	; 0x17cc <fputc>
    1400:	e8 cf       	rjmp	.-48     	; 0x13d2 <vfprintf+0x4c>
    1402:	91 2c       	mov	r9, r1
    1404:	21 2c       	mov	r2, r1
    1406:	31 2c       	mov	r3, r1
    1408:	ff e1       	ldi	r31, 0x1F	; 31
    140a:	f3 15       	cp	r31, r3
    140c:	d8 f0       	brcs	.+54     	; 0x1444 <vfprintf+0xbe>
    140e:	8b 32       	cpi	r24, 0x2B	; 43
    1410:	79 f0       	breq	.+30     	; 0x1430 <vfprintf+0xaa>
    1412:	38 f4       	brcc	.+14     	; 0x1422 <vfprintf+0x9c>
    1414:	80 32       	cpi	r24, 0x20	; 32
    1416:	79 f0       	breq	.+30     	; 0x1436 <vfprintf+0xb0>
    1418:	83 32       	cpi	r24, 0x23	; 35
    141a:	a1 f4       	brne	.+40     	; 0x1444 <vfprintf+0xbe>
    141c:	23 2d       	mov	r18, r3
    141e:	20 61       	ori	r18, 0x10	; 16
    1420:	1d c0       	rjmp	.+58     	; 0x145c <vfprintf+0xd6>
    1422:	8d 32       	cpi	r24, 0x2D	; 45
    1424:	61 f0       	breq	.+24     	; 0x143e <vfprintf+0xb8>
    1426:	80 33       	cpi	r24, 0x30	; 48
    1428:	69 f4       	brne	.+26     	; 0x1444 <vfprintf+0xbe>
    142a:	23 2d       	mov	r18, r3
    142c:	21 60       	ori	r18, 0x01	; 1
    142e:	16 c0       	rjmp	.+44     	; 0x145c <vfprintf+0xd6>
    1430:	83 2d       	mov	r24, r3
    1432:	82 60       	ori	r24, 0x02	; 2
    1434:	38 2e       	mov	r3, r24
    1436:	e3 2d       	mov	r30, r3
    1438:	e4 60       	ori	r30, 0x04	; 4
    143a:	3e 2e       	mov	r3, r30
    143c:	2a c0       	rjmp	.+84     	; 0x1492 <vfprintf+0x10c>
    143e:	f3 2d       	mov	r31, r3
    1440:	f8 60       	ori	r31, 0x08	; 8
    1442:	1d c0       	rjmp	.+58     	; 0x147e <vfprintf+0xf8>
    1444:	37 fc       	sbrc	r3, 7
    1446:	2d c0       	rjmp	.+90     	; 0x14a2 <vfprintf+0x11c>
    1448:	20 ed       	ldi	r18, 0xD0	; 208
    144a:	28 0f       	add	r18, r24
    144c:	2a 30       	cpi	r18, 0x0A	; 10
    144e:	40 f0       	brcs	.+16     	; 0x1460 <vfprintf+0xda>
    1450:	8e 32       	cpi	r24, 0x2E	; 46
    1452:	b9 f4       	brne	.+46     	; 0x1482 <vfprintf+0xfc>
    1454:	36 fc       	sbrc	r3, 6
    1456:	75 c1       	rjmp	.+746    	; 0x1742 <vfprintf+0x3bc>
    1458:	23 2d       	mov	r18, r3
    145a:	20 64       	ori	r18, 0x40	; 64
    145c:	32 2e       	mov	r3, r18
    145e:	19 c0       	rjmp	.+50     	; 0x1492 <vfprintf+0x10c>
    1460:	36 fe       	sbrs	r3, 6
    1462:	06 c0       	rjmp	.+12     	; 0x1470 <vfprintf+0xea>
    1464:	8a e0       	ldi	r24, 0x0A	; 10
    1466:	98 9e       	mul	r9, r24
    1468:	20 0d       	add	r18, r0
    146a:	11 24       	eor	r1, r1
    146c:	92 2e       	mov	r9, r18
    146e:	11 c0       	rjmp	.+34     	; 0x1492 <vfprintf+0x10c>
    1470:	ea e0       	ldi	r30, 0x0A	; 10
    1472:	2e 9e       	mul	r2, r30
    1474:	20 0d       	add	r18, r0
    1476:	11 24       	eor	r1, r1
    1478:	22 2e       	mov	r2, r18
    147a:	f3 2d       	mov	r31, r3
    147c:	f0 62       	ori	r31, 0x20	; 32
    147e:	3f 2e       	mov	r3, r31
    1480:	08 c0       	rjmp	.+16     	; 0x1492 <vfprintf+0x10c>
    1482:	8c 36       	cpi	r24, 0x6C	; 108
    1484:	21 f4       	brne	.+8      	; 0x148e <vfprintf+0x108>
    1486:	83 2d       	mov	r24, r3
    1488:	80 68       	ori	r24, 0x80	; 128
    148a:	38 2e       	mov	r3, r24
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <vfprintf+0x10c>
    148e:	88 36       	cpi	r24, 0x68	; 104
    1490:	41 f4       	brne	.+16     	; 0x14a2 <vfprintf+0x11c>
    1492:	f7 01       	movw	r30, r14
    1494:	93 fd       	sbrc	r25, 3
    1496:	85 91       	lpm	r24, Z+
    1498:	93 ff       	sbrs	r25, 3
    149a:	81 91       	ld	r24, Z+
    149c:	7f 01       	movw	r14, r30
    149e:	81 11       	cpse	r24, r1
    14a0:	b3 cf       	rjmp	.-154    	; 0x1408 <vfprintf+0x82>
    14a2:	98 2f       	mov	r25, r24
    14a4:	9f 7d       	andi	r25, 0xDF	; 223
    14a6:	95 54       	subi	r25, 0x45	; 69
    14a8:	93 30       	cpi	r25, 0x03	; 3
    14aa:	28 f4       	brcc	.+10     	; 0x14b6 <vfprintf+0x130>
    14ac:	0c 5f       	subi	r16, 0xFC	; 252
    14ae:	1f 4f       	sbci	r17, 0xFF	; 255
    14b0:	9f e3       	ldi	r25, 0x3F	; 63
    14b2:	99 83       	std	Y+1, r25	; 0x01
    14b4:	0d c0       	rjmp	.+26     	; 0x14d0 <vfprintf+0x14a>
    14b6:	83 36       	cpi	r24, 0x63	; 99
    14b8:	31 f0       	breq	.+12     	; 0x14c6 <vfprintf+0x140>
    14ba:	83 37       	cpi	r24, 0x73	; 115
    14bc:	71 f0       	breq	.+28     	; 0x14da <vfprintf+0x154>
    14be:	83 35       	cpi	r24, 0x53	; 83
    14c0:	09 f0       	breq	.+2      	; 0x14c4 <vfprintf+0x13e>
    14c2:	55 c0       	rjmp	.+170    	; 0x156e <vfprintf+0x1e8>
    14c4:	20 c0       	rjmp	.+64     	; 0x1506 <vfprintf+0x180>
    14c6:	f8 01       	movw	r30, r16
    14c8:	80 81       	ld	r24, Z
    14ca:	89 83       	std	Y+1, r24	; 0x01
    14cc:	0e 5f       	subi	r16, 0xFE	; 254
    14ce:	1f 4f       	sbci	r17, 0xFF	; 255
    14d0:	88 24       	eor	r8, r8
    14d2:	83 94       	inc	r8
    14d4:	91 2c       	mov	r9, r1
    14d6:	53 01       	movw	r10, r6
    14d8:	12 c0       	rjmp	.+36     	; 0x14fe <vfprintf+0x178>
    14da:	28 01       	movw	r4, r16
    14dc:	f2 e0       	ldi	r31, 0x02	; 2
    14de:	4f 0e       	add	r4, r31
    14e0:	51 1c       	adc	r5, r1
    14e2:	f8 01       	movw	r30, r16
    14e4:	a0 80       	ld	r10, Z
    14e6:	b1 80       	ldd	r11, Z+1	; 0x01
    14e8:	36 fe       	sbrs	r3, 6
    14ea:	03 c0       	rjmp	.+6      	; 0x14f2 <vfprintf+0x16c>
    14ec:	69 2d       	mov	r22, r9
    14ee:	70 e0       	ldi	r23, 0x00	; 0
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <vfprintf+0x170>
    14f2:	6f ef       	ldi	r22, 0xFF	; 255
    14f4:	7f ef       	ldi	r23, 0xFF	; 255
    14f6:	c5 01       	movw	r24, r10
    14f8:	4e d1       	rcall	.+668    	; 0x1796 <strnlen>
    14fa:	4c 01       	movw	r8, r24
    14fc:	82 01       	movw	r16, r4
    14fe:	f3 2d       	mov	r31, r3
    1500:	ff 77       	andi	r31, 0x7F	; 127
    1502:	3f 2e       	mov	r3, r31
    1504:	15 c0       	rjmp	.+42     	; 0x1530 <vfprintf+0x1aa>
    1506:	28 01       	movw	r4, r16
    1508:	22 e0       	ldi	r18, 0x02	; 2
    150a:	42 0e       	add	r4, r18
    150c:	51 1c       	adc	r5, r1
    150e:	f8 01       	movw	r30, r16
    1510:	a0 80       	ld	r10, Z
    1512:	b1 80       	ldd	r11, Z+1	; 0x01
    1514:	36 fe       	sbrs	r3, 6
    1516:	03 c0       	rjmp	.+6      	; 0x151e <vfprintf+0x198>
    1518:	69 2d       	mov	r22, r9
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <vfprintf+0x19c>
    151e:	6f ef       	ldi	r22, 0xFF	; 255
    1520:	7f ef       	ldi	r23, 0xFF	; 255
    1522:	c5 01       	movw	r24, r10
    1524:	2d d1       	rcall	.+602    	; 0x1780 <strnlen_P>
    1526:	4c 01       	movw	r8, r24
    1528:	f3 2d       	mov	r31, r3
    152a:	f0 68       	ori	r31, 0x80	; 128
    152c:	3f 2e       	mov	r3, r31
    152e:	82 01       	movw	r16, r4
    1530:	33 fc       	sbrc	r3, 3
    1532:	19 c0       	rjmp	.+50     	; 0x1566 <vfprintf+0x1e0>
    1534:	82 2d       	mov	r24, r2
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	88 16       	cp	r8, r24
    153a:	99 06       	cpc	r9, r25
    153c:	a0 f4       	brcc	.+40     	; 0x1566 <vfprintf+0x1e0>
    153e:	b6 01       	movw	r22, r12
    1540:	80 e2       	ldi	r24, 0x20	; 32
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	43 d1       	rcall	.+646    	; 0x17cc <fputc>
    1546:	2a 94       	dec	r2
    1548:	f5 cf       	rjmp	.-22     	; 0x1534 <vfprintf+0x1ae>
    154a:	f5 01       	movw	r30, r10
    154c:	37 fc       	sbrc	r3, 7
    154e:	85 91       	lpm	r24, Z+
    1550:	37 fe       	sbrs	r3, 7
    1552:	81 91       	ld	r24, Z+
    1554:	5f 01       	movw	r10, r30
    1556:	b6 01       	movw	r22, r12
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	38 d1       	rcall	.+624    	; 0x17cc <fputc>
    155c:	21 10       	cpse	r2, r1
    155e:	2a 94       	dec	r2
    1560:	21 e0       	ldi	r18, 0x01	; 1
    1562:	82 1a       	sub	r8, r18
    1564:	91 08       	sbc	r9, r1
    1566:	81 14       	cp	r8, r1
    1568:	91 04       	cpc	r9, r1
    156a:	79 f7       	brne	.-34     	; 0x154a <vfprintf+0x1c4>
    156c:	e1 c0       	rjmp	.+450    	; 0x1730 <vfprintf+0x3aa>
    156e:	84 36       	cpi	r24, 0x64	; 100
    1570:	11 f0       	breq	.+4      	; 0x1576 <vfprintf+0x1f0>
    1572:	89 36       	cpi	r24, 0x69	; 105
    1574:	39 f5       	brne	.+78     	; 0x15c4 <vfprintf+0x23e>
    1576:	f8 01       	movw	r30, r16
    1578:	37 fe       	sbrs	r3, 7
    157a:	07 c0       	rjmp	.+14     	; 0x158a <vfprintf+0x204>
    157c:	60 81       	ld	r22, Z
    157e:	71 81       	ldd	r23, Z+1	; 0x01
    1580:	82 81       	ldd	r24, Z+2	; 0x02
    1582:	93 81       	ldd	r25, Z+3	; 0x03
    1584:	0c 5f       	subi	r16, 0xFC	; 252
    1586:	1f 4f       	sbci	r17, 0xFF	; 255
    1588:	08 c0       	rjmp	.+16     	; 0x159a <vfprintf+0x214>
    158a:	60 81       	ld	r22, Z
    158c:	71 81       	ldd	r23, Z+1	; 0x01
    158e:	07 2e       	mov	r0, r23
    1590:	00 0c       	add	r0, r0
    1592:	88 0b       	sbc	r24, r24
    1594:	99 0b       	sbc	r25, r25
    1596:	0e 5f       	subi	r16, 0xFE	; 254
    1598:	1f 4f       	sbci	r17, 0xFF	; 255
    159a:	f3 2d       	mov	r31, r3
    159c:	ff 76       	andi	r31, 0x6F	; 111
    159e:	3f 2e       	mov	r3, r31
    15a0:	97 ff       	sbrs	r25, 7
    15a2:	09 c0       	rjmp	.+18     	; 0x15b6 <vfprintf+0x230>
    15a4:	90 95       	com	r25
    15a6:	80 95       	com	r24
    15a8:	70 95       	com	r23
    15aa:	61 95       	neg	r22
    15ac:	7f 4f       	sbci	r23, 0xFF	; 255
    15ae:	8f 4f       	sbci	r24, 0xFF	; 255
    15b0:	9f 4f       	sbci	r25, 0xFF	; 255
    15b2:	f0 68       	ori	r31, 0x80	; 128
    15b4:	3f 2e       	mov	r3, r31
    15b6:	2a e0       	ldi	r18, 0x0A	; 10
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	a3 01       	movw	r20, r6
    15bc:	43 d1       	rcall	.+646    	; 0x1844 <__ultoa_invert>
    15be:	88 2e       	mov	r8, r24
    15c0:	86 18       	sub	r8, r6
    15c2:	44 c0       	rjmp	.+136    	; 0x164c <vfprintf+0x2c6>
    15c4:	85 37       	cpi	r24, 0x75	; 117
    15c6:	31 f4       	brne	.+12     	; 0x15d4 <vfprintf+0x24e>
    15c8:	23 2d       	mov	r18, r3
    15ca:	2f 7e       	andi	r18, 0xEF	; 239
    15cc:	b2 2e       	mov	r11, r18
    15ce:	2a e0       	ldi	r18, 0x0A	; 10
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	25 c0       	rjmp	.+74     	; 0x161e <vfprintf+0x298>
    15d4:	93 2d       	mov	r25, r3
    15d6:	99 7f       	andi	r25, 0xF9	; 249
    15d8:	b9 2e       	mov	r11, r25
    15da:	8f 36       	cpi	r24, 0x6F	; 111
    15dc:	c1 f0       	breq	.+48     	; 0x160e <vfprintf+0x288>
    15de:	18 f4       	brcc	.+6      	; 0x15e6 <vfprintf+0x260>
    15e0:	88 35       	cpi	r24, 0x58	; 88
    15e2:	79 f0       	breq	.+30     	; 0x1602 <vfprintf+0x27c>
    15e4:	ae c0       	rjmp	.+348    	; 0x1742 <vfprintf+0x3bc>
    15e6:	80 37       	cpi	r24, 0x70	; 112
    15e8:	19 f0       	breq	.+6      	; 0x15f0 <vfprintf+0x26a>
    15ea:	88 37       	cpi	r24, 0x78	; 120
    15ec:	21 f0       	breq	.+8      	; 0x15f6 <vfprintf+0x270>
    15ee:	a9 c0       	rjmp	.+338    	; 0x1742 <vfprintf+0x3bc>
    15f0:	e9 2f       	mov	r30, r25
    15f2:	e0 61       	ori	r30, 0x10	; 16
    15f4:	be 2e       	mov	r11, r30
    15f6:	b4 fe       	sbrs	r11, 4
    15f8:	0d c0       	rjmp	.+26     	; 0x1614 <vfprintf+0x28e>
    15fa:	fb 2d       	mov	r31, r11
    15fc:	f4 60       	ori	r31, 0x04	; 4
    15fe:	bf 2e       	mov	r11, r31
    1600:	09 c0       	rjmp	.+18     	; 0x1614 <vfprintf+0x28e>
    1602:	34 fe       	sbrs	r3, 4
    1604:	0a c0       	rjmp	.+20     	; 0x161a <vfprintf+0x294>
    1606:	29 2f       	mov	r18, r25
    1608:	26 60       	ori	r18, 0x06	; 6
    160a:	b2 2e       	mov	r11, r18
    160c:	06 c0       	rjmp	.+12     	; 0x161a <vfprintf+0x294>
    160e:	28 e0       	ldi	r18, 0x08	; 8
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	05 c0       	rjmp	.+10     	; 0x161e <vfprintf+0x298>
    1614:	20 e1       	ldi	r18, 0x10	; 16
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	02 c0       	rjmp	.+4      	; 0x161e <vfprintf+0x298>
    161a:	20 e1       	ldi	r18, 0x10	; 16
    161c:	32 e0       	ldi	r19, 0x02	; 2
    161e:	f8 01       	movw	r30, r16
    1620:	b7 fe       	sbrs	r11, 7
    1622:	07 c0       	rjmp	.+14     	; 0x1632 <vfprintf+0x2ac>
    1624:	60 81       	ld	r22, Z
    1626:	71 81       	ldd	r23, Z+1	; 0x01
    1628:	82 81       	ldd	r24, Z+2	; 0x02
    162a:	93 81       	ldd	r25, Z+3	; 0x03
    162c:	0c 5f       	subi	r16, 0xFC	; 252
    162e:	1f 4f       	sbci	r17, 0xFF	; 255
    1630:	06 c0       	rjmp	.+12     	; 0x163e <vfprintf+0x2b8>
    1632:	60 81       	ld	r22, Z
    1634:	71 81       	ldd	r23, Z+1	; 0x01
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	0e 5f       	subi	r16, 0xFE	; 254
    163c:	1f 4f       	sbci	r17, 0xFF	; 255
    163e:	a3 01       	movw	r20, r6
    1640:	01 d1       	rcall	.+514    	; 0x1844 <__ultoa_invert>
    1642:	88 2e       	mov	r8, r24
    1644:	86 18       	sub	r8, r6
    1646:	fb 2d       	mov	r31, r11
    1648:	ff 77       	andi	r31, 0x7F	; 127
    164a:	3f 2e       	mov	r3, r31
    164c:	36 fe       	sbrs	r3, 6
    164e:	0d c0       	rjmp	.+26     	; 0x166a <vfprintf+0x2e4>
    1650:	23 2d       	mov	r18, r3
    1652:	2e 7f       	andi	r18, 0xFE	; 254
    1654:	a2 2e       	mov	r10, r18
    1656:	89 14       	cp	r8, r9
    1658:	58 f4       	brcc	.+22     	; 0x1670 <vfprintf+0x2ea>
    165a:	34 fe       	sbrs	r3, 4
    165c:	0b c0       	rjmp	.+22     	; 0x1674 <vfprintf+0x2ee>
    165e:	32 fc       	sbrc	r3, 2
    1660:	09 c0       	rjmp	.+18     	; 0x1674 <vfprintf+0x2ee>
    1662:	83 2d       	mov	r24, r3
    1664:	8e 7e       	andi	r24, 0xEE	; 238
    1666:	a8 2e       	mov	r10, r24
    1668:	05 c0       	rjmp	.+10     	; 0x1674 <vfprintf+0x2ee>
    166a:	b8 2c       	mov	r11, r8
    166c:	a3 2c       	mov	r10, r3
    166e:	03 c0       	rjmp	.+6      	; 0x1676 <vfprintf+0x2f0>
    1670:	b8 2c       	mov	r11, r8
    1672:	01 c0       	rjmp	.+2      	; 0x1676 <vfprintf+0x2f0>
    1674:	b9 2c       	mov	r11, r9
    1676:	a4 fe       	sbrs	r10, 4
    1678:	0f c0       	rjmp	.+30     	; 0x1698 <vfprintf+0x312>
    167a:	fe 01       	movw	r30, r28
    167c:	e8 0d       	add	r30, r8
    167e:	f1 1d       	adc	r31, r1
    1680:	80 81       	ld	r24, Z
    1682:	80 33       	cpi	r24, 0x30	; 48
    1684:	21 f4       	brne	.+8      	; 0x168e <vfprintf+0x308>
    1686:	9a 2d       	mov	r25, r10
    1688:	99 7e       	andi	r25, 0xE9	; 233
    168a:	a9 2e       	mov	r10, r25
    168c:	09 c0       	rjmp	.+18     	; 0x16a0 <vfprintf+0x31a>
    168e:	a2 fe       	sbrs	r10, 2
    1690:	06 c0       	rjmp	.+12     	; 0x169e <vfprintf+0x318>
    1692:	b3 94       	inc	r11
    1694:	b3 94       	inc	r11
    1696:	04 c0       	rjmp	.+8      	; 0x16a0 <vfprintf+0x31a>
    1698:	8a 2d       	mov	r24, r10
    169a:	86 78       	andi	r24, 0x86	; 134
    169c:	09 f0       	breq	.+2      	; 0x16a0 <vfprintf+0x31a>
    169e:	b3 94       	inc	r11
    16a0:	a3 fc       	sbrc	r10, 3
    16a2:	10 c0       	rjmp	.+32     	; 0x16c4 <vfprintf+0x33e>
    16a4:	a0 fe       	sbrs	r10, 0
    16a6:	06 c0       	rjmp	.+12     	; 0x16b4 <vfprintf+0x32e>
    16a8:	b2 14       	cp	r11, r2
    16aa:	80 f4       	brcc	.+32     	; 0x16cc <vfprintf+0x346>
    16ac:	28 0c       	add	r2, r8
    16ae:	92 2c       	mov	r9, r2
    16b0:	9b 18       	sub	r9, r11
    16b2:	0d c0       	rjmp	.+26     	; 0x16ce <vfprintf+0x348>
    16b4:	b2 14       	cp	r11, r2
    16b6:	58 f4       	brcc	.+22     	; 0x16ce <vfprintf+0x348>
    16b8:	b6 01       	movw	r22, r12
    16ba:	80 e2       	ldi	r24, 0x20	; 32
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	86 d0       	rcall	.+268    	; 0x17cc <fputc>
    16c0:	b3 94       	inc	r11
    16c2:	f8 cf       	rjmp	.-16     	; 0x16b4 <vfprintf+0x32e>
    16c4:	b2 14       	cp	r11, r2
    16c6:	18 f4       	brcc	.+6      	; 0x16ce <vfprintf+0x348>
    16c8:	2b 18       	sub	r2, r11
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <vfprintf+0x34a>
    16cc:	98 2c       	mov	r9, r8
    16ce:	21 2c       	mov	r2, r1
    16d0:	a4 fe       	sbrs	r10, 4
    16d2:	0f c0       	rjmp	.+30     	; 0x16f2 <vfprintf+0x36c>
    16d4:	b6 01       	movw	r22, r12
    16d6:	80 e3       	ldi	r24, 0x30	; 48
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	78 d0       	rcall	.+240    	; 0x17cc <fputc>
    16dc:	a2 fe       	sbrs	r10, 2
    16de:	16 c0       	rjmp	.+44     	; 0x170c <vfprintf+0x386>
    16e0:	a1 fc       	sbrc	r10, 1
    16e2:	03 c0       	rjmp	.+6      	; 0x16ea <vfprintf+0x364>
    16e4:	88 e7       	ldi	r24, 0x78	; 120
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <vfprintf+0x368>
    16ea:	88 e5       	ldi	r24, 0x58	; 88
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	b6 01       	movw	r22, r12
    16f0:	0c c0       	rjmp	.+24     	; 0x170a <vfprintf+0x384>
    16f2:	8a 2d       	mov	r24, r10
    16f4:	86 78       	andi	r24, 0x86	; 134
    16f6:	51 f0       	breq	.+20     	; 0x170c <vfprintf+0x386>
    16f8:	a1 fe       	sbrs	r10, 1
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <vfprintf+0x37a>
    16fc:	8b e2       	ldi	r24, 0x2B	; 43
    16fe:	01 c0       	rjmp	.+2      	; 0x1702 <vfprintf+0x37c>
    1700:	80 e2       	ldi	r24, 0x20	; 32
    1702:	a7 fc       	sbrc	r10, 7
    1704:	8d e2       	ldi	r24, 0x2D	; 45
    1706:	b6 01       	movw	r22, r12
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	60 d0       	rcall	.+192    	; 0x17cc <fputc>
    170c:	89 14       	cp	r8, r9
    170e:	30 f4       	brcc	.+12     	; 0x171c <vfprintf+0x396>
    1710:	b6 01       	movw	r22, r12
    1712:	80 e3       	ldi	r24, 0x30	; 48
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	5a d0       	rcall	.+180    	; 0x17cc <fputc>
    1718:	9a 94       	dec	r9
    171a:	f8 cf       	rjmp	.-16     	; 0x170c <vfprintf+0x386>
    171c:	8a 94       	dec	r8
    171e:	f3 01       	movw	r30, r6
    1720:	e8 0d       	add	r30, r8
    1722:	f1 1d       	adc	r31, r1
    1724:	80 81       	ld	r24, Z
    1726:	b6 01       	movw	r22, r12
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	50 d0       	rcall	.+160    	; 0x17cc <fputc>
    172c:	81 10       	cpse	r8, r1
    172e:	f6 cf       	rjmp	.-20     	; 0x171c <vfprintf+0x396>
    1730:	22 20       	and	r2, r2
    1732:	09 f4       	brne	.+2      	; 0x1736 <vfprintf+0x3b0>
    1734:	4e ce       	rjmp	.-868    	; 0x13d2 <vfprintf+0x4c>
    1736:	b6 01       	movw	r22, r12
    1738:	80 e2       	ldi	r24, 0x20	; 32
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	47 d0       	rcall	.+142    	; 0x17cc <fputc>
    173e:	2a 94       	dec	r2
    1740:	f7 cf       	rjmp	.-18     	; 0x1730 <vfprintf+0x3aa>
    1742:	f6 01       	movw	r30, r12
    1744:	86 81       	ldd	r24, Z+6	; 0x06
    1746:	97 81       	ldd	r25, Z+7	; 0x07
    1748:	02 c0       	rjmp	.+4      	; 0x174e <vfprintf+0x3c8>
    174a:	8f ef       	ldi	r24, 0xFF	; 255
    174c:	9f ef       	ldi	r25, 0xFF	; 255
    174e:	2b 96       	adiw	r28, 0x0b	; 11
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	cd bf       	out	0x3d, r28	; 61
    175a:	df 91       	pop	r29
    175c:	cf 91       	pop	r28
    175e:	1f 91       	pop	r17
    1760:	0f 91       	pop	r16
    1762:	ff 90       	pop	r15
    1764:	ef 90       	pop	r14
    1766:	df 90       	pop	r13
    1768:	cf 90       	pop	r12
    176a:	bf 90       	pop	r11
    176c:	af 90       	pop	r10
    176e:	9f 90       	pop	r9
    1770:	8f 90       	pop	r8
    1772:	7f 90       	pop	r7
    1774:	6f 90       	pop	r6
    1776:	5f 90       	pop	r5
    1778:	4f 90       	pop	r4
    177a:	3f 90       	pop	r3
    177c:	2f 90       	pop	r2
    177e:	08 95       	ret

00001780 <strnlen_P>:
    1780:	fc 01       	movw	r30, r24
    1782:	05 90       	lpm	r0, Z+
    1784:	61 50       	subi	r22, 0x01	; 1
    1786:	70 40       	sbci	r23, 0x00	; 0
    1788:	01 10       	cpse	r0, r1
    178a:	d8 f7       	brcc	.-10     	; 0x1782 <strnlen_P+0x2>
    178c:	80 95       	com	r24
    178e:	90 95       	com	r25
    1790:	8e 0f       	add	r24, r30
    1792:	9f 1f       	adc	r25, r31
    1794:	08 95       	ret

00001796 <strnlen>:
    1796:	fc 01       	movw	r30, r24
    1798:	61 50       	subi	r22, 0x01	; 1
    179a:	70 40       	sbci	r23, 0x00	; 0
    179c:	01 90       	ld	r0, Z+
    179e:	01 10       	cpse	r0, r1
    17a0:	d8 f7       	brcc	.-10     	; 0x1798 <strnlen+0x2>
    17a2:	80 95       	com	r24
    17a4:	90 95       	com	r25
    17a6:	8e 0f       	add	r24, r30
    17a8:	9f 1f       	adc	r25, r31
    17aa:	08 95       	ret

000017ac <strrev>:
    17ac:	dc 01       	movw	r26, r24
    17ae:	fc 01       	movw	r30, r24
    17b0:	67 2f       	mov	r22, r23
    17b2:	71 91       	ld	r23, Z+
    17b4:	77 23       	and	r23, r23
    17b6:	e1 f7       	brne	.-8      	; 0x17b0 <strrev+0x4>
    17b8:	32 97       	sbiw	r30, 0x02	; 2
    17ba:	04 c0       	rjmp	.+8      	; 0x17c4 <strrev+0x18>
    17bc:	7c 91       	ld	r23, X
    17be:	6d 93       	st	X+, r22
    17c0:	70 83       	st	Z, r23
    17c2:	62 91       	ld	r22, -Z
    17c4:	ae 17       	cp	r26, r30
    17c6:	bf 07       	cpc	r27, r31
    17c8:	c8 f3       	brcs	.-14     	; 0x17bc <strrev+0x10>
    17ca:	08 95       	ret

000017cc <fputc>:
    17cc:	0f 93       	push	r16
    17ce:	1f 93       	push	r17
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	fb 01       	movw	r30, r22
    17d6:	23 81       	ldd	r18, Z+3	; 0x03
    17d8:	21 fd       	sbrc	r18, 1
    17da:	03 c0       	rjmp	.+6      	; 0x17e2 <fputc+0x16>
    17dc:	8f ef       	ldi	r24, 0xFF	; 255
    17de:	9f ef       	ldi	r25, 0xFF	; 255
    17e0:	2c c0       	rjmp	.+88     	; 0x183a <fputc+0x6e>
    17e2:	22 ff       	sbrs	r18, 2
    17e4:	16 c0       	rjmp	.+44     	; 0x1812 <fputc+0x46>
    17e6:	46 81       	ldd	r20, Z+6	; 0x06
    17e8:	57 81       	ldd	r21, Z+7	; 0x07
    17ea:	24 81       	ldd	r18, Z+4	; 0x04
    17ec:	35 81       	ldd	r19, Z+5	; 0x05
    17ee:	42 17       	cp	r20, r18
    17f0:	53 07       	cpc	r21, r19
    17f2:	44 f4       	brge	.+16     	; 0x1804 <fputc+0x38>
    17f4:	a0 81       	ld	r26, Z
    17f6:	b1 81       	ldd	r27, Z+1	; 0x01
    17f8:	9d 01       	movw	r18, r26
    17fa:	2f 5f       	subi	r18, 0xFF	; 255
    17fc:	3f 4f       	sbci	r19, 0xFF	; 255
    17fe:	31 83       	std	Z+1, r19	; 0x01
    1800:	20 83       	st	Z, r18
    1802:	8c 93       	st	X, r24
    1804:	26 81       	ldd	r18, Z+6	; 0x06
    1806:	37 81       	ldd	r19, Z+7	; 0x07
    1808:	2f 5f       	subi	r18, 0xFF	; 255
    180a:	3f 4f       	sbci	r19, 0xFF	; 255
    180c:	37 83       	std	Z+7, r19	; 0x07
    180e:	26 83       	std	Z+6, r18	; 0x06
    1810:	14 c0       	rjmp	.+40     	; 0x183a <fputc+0x6e>
    1812:	8b 01       	movw	r16, r22
    1814:	ec 01       	movw	r28, r24
    1816:	fb 01       	movw	r30, r22
    1818:	00 84       	ldd	r0, Z+8	; 0x08
    181a:	f1 85       	ldd	r31, Z+9	; 0x09
    181c:	e0 2d       	mov	r30, r0
    181e:	19 95       	eicall
    1820:	89 2b       	or	r24, r25
    1822:	e1 f6       	brne	.-72     	; 0x17dc <fputc+0x10>
    1824:	d8 01       	movw	r26, r16
    1826:	16 96       	adiw	r26, 0x06	; 6
    1828:	8d 91       	ld	r24, X+
    182a:	9c 91       	ld	r25, X
    182c:	17 97       	sbiw	r26, 0x07	; 7
    182e:	01 96       	adiw	r24, 0x01	; 1
    1830:	17 96       	adiw	r26, 0x07	; 7
    1832:	9c 93       	st	X, r25
    1834:	8e 93       	st	-X, r24
    1836:	16 97       	sbiw	r26, 0x06	; 6
    1838:	ce 01       	movw	r24, r28
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	1f 91       	pop	r17
    1840:	0f 91       	pop	r16
    1842:	08 95       	ret

00001844 <__ultoa_invert>:
    1844:	fa 01       	movw	r30, r20
    1846:	aa 27       	eor	r26, r26
    1848:	28 30       	cpi	r18, 0x08	; 8
    184a:	51 f1       	breq	.+84     	; 0x18a0 <__ultoa_invert+0x5c>
    184c:	20 31       	cpi	r18, 0x10	; 16
    184e:	81 f1       	breq	.+96     	; 0x18b0 <__ultoa_invert+0x6c>
    1850:	e8 94       	clt
    1852:	6f 93       	push	r22
    1854:	6e 7f       	andi	r22, 0xFE	; 254
    1856:	6e 5f       	subi	r22, 0xFE	; 254
    1858:	7f 4f       	sbci	r23, 0xFF	; 255
    185a:	8f 4f       	sbci	r24, 0xFF	; 255
    185c:	9f 4f       	sbci	r25, 0xFF	; 255
    185e:	af 4f       	sbci	r26, 0xFF	; 255
    1860:	b1 e0       	ldi	r27, 0x01	; 1
    1862:	3e d0       	rcall	.+124    	; 0x18e0 <__ultoa_invert+0x9c>
    1864:	b4 e0       	ldi	r27, 0x04	; 4
    1866:	3c d0       	rcall	.+120    	; 0x18e0 <__ultoa_invert+0x9c>
    1868:	67 0f       	add	r22, r23
    186a:	78 1f       	adc	r23, r24
    186c:	89 1f       	adc	r24, r25
    186e:	9a 1f       	adc	r25, r26
    1870:	a1 1d       	adc	r26, r1
    1872:	68 0f       	add	r22, r24
    1874:	79 1f       	adc	r23, r25
    1876:	8a 1f       	adc	r24, r26
    1878:	91 1d       	adc	r25, r1
    187a:	a1 1d       	adc	r26, r1
    187c:	6a 0f       	add	r22, r26
    187e:	71 1d       	adc	r23, r1
    1880:	81 1d       	adc	r24, r1
    1882:	91 1d       	adc	r25, r1
    1884:	a1 1d       	adc	r26, r1
    1886:	20 d0       	rcall	.+64     	; 0x18c8 <__ultoa_invert+0x84>
    1888:	09 f4       	brne	.+2      	; 0x188c <__ultoa_invert+0x48>
    188a:	68 94       	set
    188c:	3f 91       	pop	r19
    188e:	2a e0       	ldi	r18, 0x0A	; 10
    1890:	26 9f       	mul	r18, r22
    1892:	11 24       	eor	r1, r1
    1894:	30 19       	sub	r19, r0
    1896:	30 5d       	subi	r19, 0xD0	; 208
    1898:	31 93       	st	Z+, r19
    189a:	de f6       	brtc	.-74     	; 0x1852 <__ultoa_invert+0xe>
    189c:	cf 01       	movw	r24, r30
    189e:	08 95       	ret
    18a0:	46 2f       	mov	r20, r22
    18a2:	47 70       	andi	r20, 0x07	; 7
    18a4:	40 5d       	subi	r20, 0xD0	; 208
    18a6:	41 93       	st	Z+, r20
    18a8:	b3 e0       	ldi	r27, 0x03	; 3
    18aa:	0f d0       	rcall	.+30     	; 0x18ca <__ultoa_invert+0x86>
    18ac:	c9 f7       	brne	.-14     	; 0x18a0 <__ultoa_invert+0x5c>
    18ae:	f6 cf       	rjmp	.-20     	; 0x189c <__ultoa_invert+0x58>
    18b0:	46 2f       	mov	r20, r22
    18b2:	4f 70       	andi	r20, 0x0F	; 15
    18b4:	40 5d       	subi	r20, 0xD0	; 208
    18b6:	4a 33       	cpi	r20, 0x3A	; 58
    18b8:	18 f0       	brcs	.+6      	; 0x18c0 <__ultoa_invert+0x7c>
    18ba:	49 5d       	subi	r20, 0xD9	; 217
    18bc:	31 fd       	sbrc	r19, 1
    18be:	40 52       	subi	r20, 0x20	; 32
    18c0:	41 93       	st	Z+, r20
    18c2:	02 d0       	rcall	.+4      	; 0x18c8 <__ultoa_invert+0x84>
    18c4:	a9 f7       	brne	.-22     	; 0x18b0 <__ultoa_invert+0x6c>
    18c6:	ea cf       	rjmp	.-44     	; 0x189c <__ultoa_invert+0x58>
    18c8:	b4 e0       	ldi	r27, 0x04	; 4
    18ca:	a6 95       	lsr	r26
    18cc:	97 95       	ror	r25
    18ce:	87 95       	ror	r24
    18d0:	77 95       	ror	r23
    18d2:	67 95       	ror	r22
    18d4:	ba 95       	dec	r27
    18d6:	c9 f7       	brne	.-14     	; 0x18ca <__ultoa_invert+0x86>
    18d8:	00 97       	sbiw	r24, 0x00	; 0
    18da:	61 05       	cpc	r22, r1
    18dc:	71 05       	cpc	r23, r1
    18de:	08 95       	ret
    18e0:	9b 01       	movw	r18, r22
    18e2:	ac 01       	movw	r20, r24
    18e4:	0a 2e       	mov	r0, r26
    18e6:	06 94       	lsr	r0
    18e8:	57 95       	ror	r21
    18ea:	47 95       	ror	r20
    18ec:	37 95       	ror	r19
    18ee:	27 95       	ror	r18
    18f0:	ba 95       	dec	r27
    18f2:	c9 f7       	brne	.-14     	; 0x18e6 <__ultoa_invert+0xa2>
    18f4:	62 0f       	add	r22, r18
    18f6:	73 1f       	adc	r23, r19
    18f8:	84 1f       	adc	r24, r20
    18fa:	95 1f       	adc	r25, r21
    18fc:	a0 1d       	adc	r26, r0
    18fe:	08 95       	ret

00001900 <eeprom_read_block>:
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22

00001904 <eeprom_read_blraw>:
    1904:	fc 01       	movw	r30, r24
    1906:	f9 99       	sbic	0x1f, 1	; 31
    1908:	fe cf       	rjmp	.-4      	; 0x1906 <eeprom_read_blraw+0x2>
    190a:	06 c0       	rjmp	.+12     	; 0x1918 <eeprom_read_blraw+0x14>
    190c:	f2 bd       	out	0x22, r31	; 34
    190e:	e1 bd       	out	0x21, r30	; 33
    1910:	f8 9a       	sbi	0x1f, 0	; 31
    1912:	31 96       	adiw	r30, 0x01	; 1
    1914:	00 b4       	in	r0, 0x20	; 32
    1916:	0d 92       	st	X+, r0
    1918:	41 50       	subi	r20, 0x01	; 1
    191a:	50 40       	sbci	r21, 0x00	; 0
    191c:	b8 f7       	brcc	.-18     	; 0x190c <eeprom_read_blraw+0x8>
    191e:	08 95       	ret

00001920 <eeprom_read_word>:
    1920:	a8 e1       	ldi	r26, 0x18	; 24
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	42 e0       	ldi	r20, 0x02	; 2
    1926:	50 e0       	ldi	r21, 0x00	; 0
    1928:	ed cf       	rjmp	.-38     	; 0x1904 <eeprom_read_blraw>

0000192a <eeprom_update_block>:
    192a:	dc 01       	movw	r26, r24
    192c:	a4 0f       	add	r26, r20
    192e:	b5 1f       	adc	r27, r21
    1930:	41 50       	subi	r20, 0x01	; 1
    1932:	50 40       	sbci	r21, 0x00	; 0
    1934:	40 f0       	brcs	.+16     	; 0x1946 <eeprom_update_block+0x1c>
    1936:	cb 01       	movw	r24, r22
    1938:	84 0f       	add	r24, r20
    193a:	95 1f       	adc	r25, r21
    193c:	2e 91       	ld	r18, -X
    193e:	05 d0       	rcall	.+10     	; 0x194a <eeprom_update_r18>
    1940:	41 50       	subi	r20, 0x01	; 1
    1942:	50 40       	sbci	r21, 0x00	; 0
    1944:	d8 f7       	brcc	.-10     	; 0x193c <eeprom_update_block+0x12>
    1946:	08 95       	ret

00001948 <eeprom_update_byte>:
    1948:	26 2f       	mov	r18, r22

0000194a <eeprom_update_r18>:
    194a:	f9 99       	sbic	0x1f, 1	; 31
    194c:	fe cf       	rjmp	.-4      	; 0x194a <eeprom_update_r18>
    194e:	92 bd       	out	0x22, r25	; 34
    1950:	81 bd       	out	0x21, r24	; 33
    1952:	f8 9a       	sbi	0x1f, 0	; 31
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	00 b4       	in	r0, 0x20	; 32
    1958:	02 16       	cp	r0, r18
    195a:	39 f0       	breq	.+14     	; 0x196a <eeprom_update_r18+0x20>
    195c:	1f ba       	out	0x1f, r1	; 31
    195e:	20 bd       	out	0x20, r18	; 32
    1960:	0f b6       	in	r0, 0x3f	; 63
    1962:	f8 94       	cli
    1964:	fa 9a       	sbi	0x1f, 2	; 31
    1966:	f9 9a       	sbi	0x1f, 1	; 31
    1968:	0f be       	out	0x3f, r0	; 63
    196a:	08 95       	ret

0000196c <eeprom_update_word>:
    196c:	01 96       	adiw	r24, 0x01	; 1
    196e:	27 2f       	mov	r18, r23
    1970:	ec df       	rcall	.-40     	; 0x194a <eeprom_update_r18>
    1972:	ea cf       	rjmp	.-44     	; 0x1948 <eeprom_update_byte>

00001974 <_exit>:
    1974:	f8 94       	cli

00001976 <__stop_program>:
    1976:	ff cf       	rjmp	.-2      	; 0x1976 <__stop_program>
